_id,rule,language,vulnerable_snippet,ground_truths
653697ad54f49bf07acf90dc,1,java,"1: private void sendEmailRecipe()  {
2:     // rest of the code
3:     Intent sendIntent = new Intent(Intent.ACTION_SEND);
4:     sendIntent.putExtra(Intent.EXTRA_SUBJECT, app.mRecipeName);
5:     sendIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse(""file://""+file.getAbsolutePath()));
6:     sendIntent.setType(""text/plain"");
7:     startActivity(sendIntent);
8: }","private void sendEmailRecipe()  {
    // rest of the code
    Intent sendIntent = new Intent(Intent.ACTION_SEND);
    sendIntent.putExtra(Intent.EXTRA_SUBJECT, app.mRecipeName);
    sendIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse (""file://""+file.getAbsolutePath()));
    sendIntent.setType(""text/plain"");
    
    List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(sendIntent, PackageManager.MATCH_ALL);
    if (possibleActivitiesList.size() > 1) {
        String title = getResources().getString(R.string.chooser_title);
        Intent chooser = Intent.createChooser(sendIntent, title);
        startActivity(chooser);
    } else {  startActivity(sendIntent); }
}"
653697ad54f49bf07acf90dd,1,java,"1: public void onCreate(Bundle icicle) {
2:     // rest of the code
3:     final Intent intent = getIntent();
4:     if (intent.getData() == null)  {
5:         intent.setData(Provider.Recipes.CONTENT_URI);
6:     }
7:     action = intent.getAction();
8:     // rest of the code
9: }","public void onCreate(Bundle icicle)     {
    // rest of the code
    final Intent intent = getIntent();
    if (intent.getData() == null)  {
        intent.setData(Provider.Recipes.CONTENT_URI);
    }
    action = intent.getAction();
    
    List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
    if (possibleActivitiesList.size() > 1) {
        String title = getResources().getString(R.string.chooser_title);
        Intent chooser = Intent.createChooser(intent, title);
        startActivity(chooser);
    }
    // rest of the code
}"
65369fb41edc38ed413f0da0,1,java,"1: public void onClick(View view)  {
2:     int id = view.getId();
3:     Log.i(TAG, ""onClick(View "" + view + "", id "" + id + "")..."");
4:     switch (id)  {
5:         case R.id.pick_button ->  {
6:             Log.i(TAG, ""onClick: pick_button..."");
7:             Intent intent = new Intent(Intent.ACTION_GET_CONTENT, null);
8:             intent.setType(""image/*"");
9:             startActivityForResult(intent, PHOTO_PICKED);
10:         }
11:         // rest of the code
12:     }
13: }","public void onClick(View view)  {
    int id = view.getId();
    Log.i(TAG, ""onClick(View "" + view + "", id "" + id + "")..."");
    switch (id)  {
        case R.id.pick_button ->  {
            Log.i(TAG, ""onClick: pick_button..."");
            Intent intent = new Intent(Intent.ACTION_GET_CONTENT, null);
            intent.setType(""image/*"");
            
            List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
            if (possibleActivitiesList.size() > 1) {
                String title = getResources().getString(R.string.chooser_title);
                Intent chooser = Intent.createChooser(intent, title);
                startActivity(chooser);
            } else { startActivityForResult(intent, PHOTO_PICKED); }
            }
            // rest of the code
        }
    }
}"
6536a5d315332e44d8f99020,1,java,"1: public void onClickFilesSelect()  {
2:     Intent i = new Intent(Intent.ACTION_GET_CONTENT);
3:     i.setType(""*/*"");
4:     i.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);
5:     mutipleFilesActivityResultLauncher.launch(i);
6:     // rest of the code
7: }","public void onClickFilesSelect()  {
    Intent i = new Intent(Intent.ACTION_GET_CONTENT);
    i.setType(""*/*"");
    i.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);
    
    List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(i, PackageManager.MATCH_ALL);
    if (possibleActivitiesList.size() > 1) {
        String title = getResources().getString(R.string.chooser_title);
        Intent chooser = Intent.createChooser(i, title);
        startActivity(chooser);
    } else { mutipleFilesActivityResultLauncher.launch(i); }
        // rest of the code
}"
6536a5d315332e44d8f99021,1,java,"1: public void askIgnoreBatteryOptimizations()  {
2:     // rest of the code
3:     Intent intent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);
4:     intent.setData(Uri.parse(""package:"" + getPackageName()));
5:     batteryActivityResultLauncher.launch(intent);
6: }","public void askIgnoreBatteryOptimizations()  {
    // rest of the code
    Intent intent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);
    intent.setData(Uri.parse(""package:"" + getPackageName()));
    
    List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
    if (possibleActivitiesList.size() > 1) {
        String title = getResources().getString(R.string.chooser_title);
        Intent chooser = Intent.createChooser(intent, title);
        startActivity(chooser);
    } else { batteryActivityResultLauncher.launch(intent); }
}"
6536a5d315332e44d8f99022,1,java,"1: public void onClickImageSelect()  {
2:     try  {
3:         Intent intent = new Intent(Intent.ACTION_PICK);
4:         intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);
5:         intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, ""image/* video/*"");
6:         gallerySelectorActivityResultLauncher.launch(intent);
7:     }
8:     // rest of the code
9: }","public void onClickImageSelect()  {
    try  {
        Intent intent = new Intent(Intent.ACTION_PICK);
        intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);
        intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, ""image/* video/*"");
        
        List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
        if (possibleActivitiesList.size() > 1) {
            String title = getResources().getString(R.string.chooser_title);
            Intent chooser = Intent.createChooser(intent, title);
            startActivity(chooser);
        } else {  gallerySelectorActivityResultLauncher.launch(intent); }
            // rest of the code
    catch (Exception e) {}
}"
6536a659e78bb1e0788e3d16,1,java,"1: // rest of the code
2: Intent sendIntent = new Intent();
3: sendIntent.setAction(Intent.ACTION_SEND);
4: sendIntent.putExtra(Intent.EXTRA_TEXT, String.format(activityContext.getString(R.string.check_out), getString(R.string.app_name), PLAY_STORE_LINK));
5: sendIntent.setType(""text/plain"");
6: startActivity(sendIntent);
7: // rest of the code","// rest of the code
Intent sendIntent = new Intent();
sendIntent.setAction(Intent.ACTION_SEND);
sendIntent.putExtra(Intent.EXTRA_TEXT,
String.format(activityContext.getString(R.string.check_out), getString(R.string.app_name), PLAY_STORE_LINK));
sendIntent.setType(""text/plain"");

List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(sendIntent, PackageManager.MATCH_ALL);
if (possibleActivitiesList.size() > 1) {
    String title = getResources().getString(R.string.chooser_title);
    Intent chooser = Intent.createChooser(sendIntent, title);
    startActivity(chooser);
} else { startActivity(sendIntent); }
    // rest of the code"
6536ae128f93bedd78a1a9a6,1,java,"1: public static Intent newEmailIntent(String address, String subject, String body, String cc)  {
2:     Intent intent = new Intent(Intent.ACTION_SEND);
3:     intent.putExtra(Intent.EXTRA_EMAIL, new String[] {
4:         address});
5:         intent.putExtra(Intent.EXTRA_TEXT, body);
6:         intent.putExtra(Intent.EXTRA_SUBJECT, subject);
7:         intent.putExtra(Intent.EXTRA_CC, cc);
8:         intent.setType(""message/rfc822"");
9:         return intent;
10:     }","public static Intent newEmailIntent(String address, String subject, String body, String cc)  {
    Intent intent = new Intent(Intent.ACTION_SEND);
    intent.putExtra(Intent.EXTRA_EMAIL, new String[] {
    address});
    intent.putExtra(Intent.EXTRA_TEXT, body);
    intent.putExtra(Intent.EXTRA_SUBJECT, subject);
    intent.putExtra(Intent.EXTRA_CC, cc);
    intent.setType(""message/rfc822"");
    
    List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
    if (possibleActivitiesList.size() > 1) {
        String title = getResources().getString(R.string.chooser_title);
        Intent chooser = Intent.createChooser(intent, title);
        startActivity(chooser);
    }
    return intent;
}"
6536ae128f93bedd78a1a9a7,1,java,"1: public static void createShortcut(@NonNull Activity activity,@NonNull HistoryEntry historyEntry,@NonNull Bitmap favicon)  {
2:     Intent shortcutIntent = new Intent(Intent.ACTION_VIEW);
3:     shortcutIntent.setData(Uri.parse(historyEntry.getUrl()));
4:     shortcutIntent.setPackage(""org.midorinext.android"");
5:     // rest of the code
6: }","public static void createShortcut(@NonNull Activity activity,@NonNull HistoryEntry historyEntry,@NonNull Bitmap favicon)  {
    Intent shortcutIntent = new Intent(Intent.ACTION_VIEW);
    shortcutIntent.setData(Uri.parse(historyEntry.getUrl()));
    shortcutIntent.setPackage(package_name);
    
    List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(shortcutIntent, PackageManager.MATCH_ALL);
    if (possibleActivitiesList.size() > 1) {
        String title = getResources().getString(R.string.chooser_title);
        Intent chooser = Intent.createChooser(shortcutIntent, title);
        startActivity(chooser);
    }
    // rest of the code
}"
6536b28aaa68d06e875b12dd,1,java,"1: private void newRingtone()  {
2:     // rest of the code
3:     if (hasPerm)  {
4:         final Intent chooseFile = new Intent(Intent.ACTION_GET_CONTENT);
5:         chooseFile.setType(""audio/*"");
6:         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT)  {
7:             chooseFile.putExtra(Intent.EXTRA_MIME_TYPES, new String[]{""audio/*"", ""application/ogg""});
8:         }
9:         startActivityForResult(chooseFile, getRingtonePreference().getCustomRingtoneRequestCode());
10:     } else  {
11:         requestPermissions(new String[] {
12:             Manifest.permission.WRITE_EXTERNAL_STORAGE}, getRingtonePreference().getPermissionRequestCode());
13:         }
14:     }","private void newRingtone()  {
    // rest of the code
    if (hasPerm)  {
        final Intent chooseFile = new Intent(Intent.ACTION_GET_CONTENT);
        chooseFile.setType(""audio/*"");
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT)  {
        chooseFile.putExtra(Intent.EXTRA_MIME_TYPES, new String[]{""audio/*"", ""application/ogg""});
        }
        
        List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
        if (possibleActivitiesList.size() > 1) {
            String title = getResources().getString(R.string.chooser_title);
            Intent chooser = Intent.createChooser(intent, title);
            startActivity(chooser);
        } else { startActivityForResult(chooseFile, getRingtonePreference().getCustomRingtoneRequestCode()); }
    } 
    else { requestPermissions(new String[] { Manifest.permission.WRITE_EXTERNAL_STORAGE}, getRingtonePreference().getPermissionRequestCode()); }
}"
6536b28aaa68d06e875b12de,1,java,"1: private static void selectMediaType(Activity activity, String type, int requestCode)  {
2:     final Intent intent = new Intent();
3:     intent.setType(type);
4:     // rest of the code
5:     intent.setAction(Intent.ACTION_GET_CONTENT);
6:     try  {
7:         activity.startActivityForResult(intent, requestCode);
8:     } catch (ActivityNotFoundException anfe)  {
9:         Log.w(TAG, ""couldn't complete ACTION_GET_CONTENT intent, no activity found. falling back."");
10:         Toast.makeText(activity, R.string.AttachmentManager_cant_open_media_selection, Toast.LENGTH_LONG).show();
11:     }
12: }","private static void selectMediaType(Activity activity, String type, int requestCode)  {
    final Intent intent = new Intent();
    intent.setType(type);
    // rest of the code
    intent.setAction(Intent.ACTION_GET_CONTENT);
    try  {
        
        List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
        if (possibleActivitiesList.size() > 1) {
            String title = getResources().getString(R.string.chooser_title);
            Intent chooser = Intent.createChooser(intent, title);
            startActivity(chooser);
        } else { activity.startActivityForResult(intent, requestCode); }
        } catch (ActivityNotFoundException anfe)  {
            Log.w(TAG, ""couldn't complete ACTION_GET_CONTENT intent, no activity found. falling back."");
            Toast.makeText(activity, R.string.AttachmentManager_cant_open_media_selection, Toast.LENGTH_LONG).show();
        }
    } catch (Exception e) {}
}"
6536b28aaa68d06e875b12df,1,java,"1: private void previewImageDraft(final @NonNull Slide slide)  {
2:     if (MediaPreviewActivity.isContentTypeSupported(slide.getContentType()) && slide.getUri() != null)  {
3:         Intent intent = new Intent(context, MediaPreviewActivity.class);
4:         intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
5:         intent.putExtra(MediaPreviewActivity.SIZE_EXTRA, slide.asAttachment().getSize());
6:         intent.setDataAndType(slide.getUri(), slide.getContentType());
7:         context.startActivity(intent);
8:     }
9: }","private void previewImageDraft(final @NonNull Slide slide)  {
    if (MediaPreviewActivity.isContentTypeSupported(slide.getContentType()) && slide.getUri() != null)  {
        Intent intent = new Intent(context, MediaPreviewActivity.class);
        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
        intent.putExtra(MediaPreviewActivity.SIZE_EXTRA, slide.asAttachment().getSize());
        intent.setDataAndType(slide.getUri(), slide.getContentType());
        
        List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
        if (possibleActivitiesList.size() > 1) {
            String title = getResources().getString(R.string.chooser_title);
            Intent chooser = Intent.createChooser(intent, title);
            startActivity(chooser);
        } else {  context.startActivity(intent); }
    }
}"
6536b2af8894263da8016cc7,1,java,"1: public static void openFile(Fragment fragment, Uri last, String mimeType, int requestCode)  {
2:     Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
3:     intent.addCategory(Intent.CATEGORY_OPENABLE);
4:     intent.setData(last);
5:     intent.setType(mimeType);
6:     try  {
7:         fragment.startActivityForResult(intent, requestCode);
8:     } catch (ActivityNotFoundException e)  {
9:         Toast.makeText(fragment.getActivity(), R.string.no_filemanager_installed,Toast.LENGTH_SHORT).show();
10:     }
11: }","public static void openFile(Fragment fragment, Uri last, String mimeType, int requestCode)  {
    Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
    intent.addCategory(Intent.CATEGORY_OPENABLE);
    intent.setData(last);
    intent.setType(mimeType);
    try  {
        
        List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
        if (possibleActivitiesList.size() > 1) {
            String title = getResources().getString(R.string.chooser_title);
            Intent chooser = Intent.createChooser(intent, title);
            startActivity(chooser);
        } else {  fragment.startActivityForResult(intent, requestCode); }
    } catch (ActivityNotFoundException e)  {
        Toast.makeText(fragment.getActivity(), R.string.no_filemanager_installed,Toast.LENGTH_SHORT).show();
    }
}"
6536b2af8894263da8016cc8,1,java,"1: public void onFileSelected(File file, boolean checked)  {
2:     Intent intent = new Intent();
3:     intent.setData(Uri.fromFile(file));
4:     fragment.onActivityResult(requestCode, Activity.RESULT_OK, intent);
5: }
6: }, fragment.getActivity().getSupportFragmentManager(), title, message, defaultFile, checkMsg);","public void onFileSelected(File file, boolean checked)  {
    Intent intent = new Intent();
    intent.setData(Uri.fromFile(file));
    
    List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
    if (possibleActivitiesList.size() > 1) {
        String title = getResources().getString(R.string.chooser_title);
        Intent chooser = Intent.createChooser(intent, title);
        startActivity(chooser);
    } else {  fragment.onActivityResult(requestCode, Activity.RESULT_OK, intent); }
}, fragment.getActivity().getSupportFragmentManager(), title, message, defaultFile, checkMsg);"
654012a5ea47246b0d67a31c,1,java,"1: public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams)  {
2:     // rest of the code
3:     Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
4:     intent.addCategory(Intent.CATEGORY_OPENABLE);
5:     intent.setType(""*/*"");
6:     startActivityForResult(intent, FILE_CHOOSER_REQUEST_CODE);
7:     return true;
8: }","public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams)  {
    // rest of the code
    Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
    intent.addCategory(Intent.CATEGORY_OPENABLE);
    intent.setType(""*/*"");
    
    List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
    if (possibleActivitiesList.size() > 1) {
        String title = getResources().getString(R.string.chooser_title);
        Intent chooser = Intent.createChooser(intent, title);
        startActivity(chooser);
    } else { startActivityForResult(intent, FILE_CHOOSER_REQUEST_CODE); }
    return true;
}"
65401413f7530755d6e3065c,1,java,"1: private void onClickedShare()  {
2:     Intent intent = new Intent(Intent.ACTION_SEND);
3:     intent.putExtra(Intent.EXTRA_SUBJECT, createErrorTitle());
4:     intent.putExtra(Intent.EXTRA_TEXT, viewBinding.textViewError.getText());
5:     intent.setType(""text/plain"");
6:     startActivity(intent);
7: }","private void onClickedShare()  {
    Intent intent = new Intent(Intent.ACTION_SEND);
    intent.putExtra(Intent.EXTRA_SUBJECT, createErrorTitle());
    intent.putExtra(Intent.EXTRA_TEXT, viewBinding.textViewError.getText());
    intent.setType(""text/plain"");
    
    List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
    if (possibleActivitiesList.size() > 1) {
        String title = getResources().getString(R.string.chooser_title);
        Intent chooser = Intent.createChooser(intent, title);
        startActivity(chooser);
    } else {  startActivity(intent); }
}"
654019d4e9944987622a5991,1,java,"1: // rest of the code
2: Intent i = new Intent(Intent.ACTION_VIEW);
3: i.setData(Uri.parse(url));
4: startActivity(i);
5: return;
6: // rest of the code","// rest of the code
Intent i = new Intent(Intent.ACTION_VIEW);
i.setData(Uri.parse(url));

List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(i, PackageManager.MATCH_ALL);
if (possibleActivitiesList.size() > 1) {
    String title = getResources().getString(R.string.chooser_title);
    Intent chooser = Intent.createChooser(i, title);
    startActivity(chooser);
} else { startActivity(i); }
return;
// rest of the code"
654019d4e9944987622a5992,1,java,"1: // rest of the code
2: Intent myIntent = new Intent();
3: String packageName = activity.getPackageName();
4: myIntent.setAction(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);
5: myIntent.setData(Uri.parse(""package:"" + packageName));
6: activity.startActivity(myIntent);
7: // rest of the code","// rest of the code
Intent myIntent = new Intent();
String packageName = activity.getPackageName();
myIntent.setAction(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);
myIntent.setData(Uri.parse(""package:"" + packageName));

List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(myIntent, PackageManager.MATCH_ALL);
if (possibleActivitiesList.size() > 1) {
    String title = getResources().getString(R.string.chooser_title);
    Intent chooser = Intent.createChooser(myIntent, title);
    startActivity(chooser);
} else { activity.startActivity(myIntent); }
// rest of the code"
654019d5e9944987622a5993,1,java,"1: private boolean handleUri(final Uri uri)  {
2:     // rest of the code
3:     Intent i = new Intent(Intent.ACTION_VIEW);
4:     i.setData(uri);
5:     startActivity(i);
6:     return true;
7: }","private boolean handleUri(final Uri uri)  {
    // rest of the code
    Intent i = new Intent(Intent.ACTION_VIEW);
    i.setData(uri);
    
    List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(i, PackageManager.MATCH_ALL);
    if (possibleActivitiesList.size() > 1) {
        String title = getResources().getString(R.string.chooser_title);
        Intent chooser = Intent.createChooser(i, title);
        startActivity(chooser);
    } else { startActivity(i); }
    return true;
}"
654019d5e9944987622a5994,1,java,"1: // rest of the code
2: Intent installIntent = new Intent(Intent.ACTION_VIEW);
3: installIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
4: installIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
5: installIntent.putExtra(Intent.EXTRA_NOT_UNKNOWN_SOURCE, true);
6: installIntent.setDataAndType(fileUri, downloadManager.getMimeTypeForDownloadedFile(referenceId));
7: try  {
8:     Log.d(TAG, ""onDownloadComplete startActivity(installIntent)"");
9:     startActivity(installIntent);
10: } catch(Exception ex)  {
11:     Log.d(TAG, ""# onDownloadComplete startActivity(installIntent) ex=""+ex);
12:     Toast.makeText(activity,""APK downloaded. Cannot offer to install."", Toast.LENGTH_LONG).show();
13: }
14: // rest of the code","// rest of the code
Intent installIntent = new Intent(Intent.ACTION_VIEW);
installIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
installIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
installIntent.putExtra(Intent.EXTRA_NOT_UNKNOWN_SOURCE, true);
installIntent.setDataAndType(fileUri, downloadManager.getMimeTypeForDownloadedFile(referenceId));
try  {
    Log.d(TAG, ""onDownloadComplete startActivity(installIntent)"");
    
    List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(installIntent, PackageManager.MATCH_ALL);
    if (possibleActivitiesList.size() > 1) {
        String title = getResources().getString(R.string.chooser_title);
        Intent chooser = Intent.createChooser(installIntent, title);
        startActivity(chooser);
    }
    startActivity(installIntent);
} catch(Exception ex)  {
    Log.d(TAG, ""# onDownloadComplete startActivity(installIntent) ex=""+ex);
    Toast.makeText(activity,""APK downloaded. Cannot offer to install."", Toast.LENGTH_LONG).show();
}
// rest of the code"
654019d5e9944987622a5995,1,java,"1: // rest of the code
2: Intent intent = new Intent(Intent.ACTION_VIEW);
3: intent.setDataAndType(fileUri, ""text/plain"");
4: intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
5: startActivity(intent);
6: // rest of the code","// rest of the code
Intent intent = new Intent(Intent.ACTION_VIEW);
intent.setDataAndType(fileUri, ""text/plain"");
intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);

List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
if (possibleActivitiesList.size() > 1) {
    String title = getResources().getString(R.string.chooser_title);
    Intent chooser = Intent.createChooser(intent, title);
    startActivity(chooser);
} else{ startActivity(intent); }
// rest of the code"
66c7c8914e24f90babca7ee0,1,java,"1: Intent intent = new Intent(Intent.ACTION_VIEW);
2: intent.setDataAndType(fileUri, ""text/plain"");
3: intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
4: startActivity(intent);
5: return true;","
Intent intent = new Intent(Intent.ACTION_VIEW);
intent.setDataAndType(fileUri, ""text/plain"");
intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
if (possibleActivitiesList.size() > 1) {
    String title = getResources().getString(R.string.chooser_title);
    Intent chooser = Intent.createChooser(intent, title);
    startActivity(chooser);
} else {  startActivity(intent); }
return true;"
66cf3171e1f0d1586b43f0b0,1,java,"1: // rest of the code
2: Intent intent = new Intent(Intent.ACTION_INSERT)
3: .setData(CalendarContract.Events.CONTENT_URI)
4: .putExtra(CalendarContract.Events.TITLE, title)
5: .putExtra(CalendarContract.Events.DESCRIPTION, temp + link);
6: if (Utils.isIntentAvailable(this, intent)) {
7:     startActivity(intent);
8: } else {
9:     Snackbar snackbar = Snackbar.make(getCoordinatorLayout(), getResources().getString(R.string.error_no_calendar_app), Snackbar.LENGTH_SHORT);
10:     Utils.anchorSnackbar(snackbar, R.id.fragment_content);
11:     snackbar.show();
12: }
13: // rest of the code","// rest of the code
Intent intent = new Intent(Intent.ACTION_INSERT)
.setData(CalendarContract.Events.CONTENT_URI)
.putExtra(CalendarContract.Events.TITLE, title)
.putExtra(CalendarContract.Events.DESCRIPTION, temp + link);

List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
if (possibleActivitiesList.size() > 1) {
    String title = getResources().getString(R.string.chooser_title);
    Intent chooser = Intent.createChooser(intent, title);
    startActivity(chooser);
} else {
    if (Utils.isIntentAvailable(this, intent)) {
      startActivity(intent);
    } else {
        // rest of the code
    }
}
// rest of the code"
66cf3774608fcf23a8931267,1,java,"1: private void showSelectLocalFileDialog()  {
2:     int requestCode = RequestCodes.SELECT_FILE;
3:     AppCompatActivity host = (AppCompatActivity) _host;
4:     DatabaseManager dbManager = new DatabaseManager(getContext());
5:     String dbDirectory = dbManager.getDefaultDatabaseDirectory();
6:     Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
7:     intent.setType(""*/*"");
8:     host.startActivityForResult(intent, requestCode);
9:     // rest of the code
10: }","private void showSelectLocalFileDialog()  {
    int requestCode = RequestCodes.SELECT_FILE;
    AppCompatActivity host = (AppCompatActivity) _host;
    DatabaseManager dbManager = new DatabaseManager(getContext());
    String dbDirectory = dbManager.getDefaultDatabaseDirectory();
    Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
    intent.setType(""*/*"");
    
    List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
    if (possibleActivitiesList.size() > 1) {
        String title = getResources().getString(R.string.chooser_title);
        Intent chooser = Intent.createChooser(intent, title);
        host.startActivityForResult(chooser, requestCode);
    } else {}
    // rest of the code
}"
66cf3e9e26dd511a37eb1108,1,java,"1: public void run()  {
2:     piping_was_already_launched = true;
3:     Intent resultIntent = new Intent();
4:     Uri resultUri = PictureCache.getLastFileUri(context);
5:     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN)  {
6:         String[] mimeTypes = new String[1];
7:         mimeTypes[0]=ImageWriter.getMimeType(context);
8:         ClipData.Item clipItem = new ClipData.Item(resultUri);
9:         ClipData clipData = new ClipData(""clipdata"",mimeTypes,clipItem);
10:         resultIntent.setClipData(clipData);
11:     }
12:     resultIntent.setAction(Intent.ACTION_SEND);
13:     resultIntent.setDataAndType(resultUri,ImageWriter.getMimeType(context));
14:     resultIntent.putExtra(Intent.EXTRA_STREAM, resultUri);
15:     resultIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
16:     setResult(Activity.RESULT_OK,resultIntent);
17:     finish();
18: }","public void run()  {
    piping_was_already_launched = true;
    Intent resultIntent = new Intent();
    Uri resultUri = PictureCache.getLastFileUri(context);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN)  {
        String[] mimeTypes = new String[1];
        mimeTypes[0]=ImageWriter.getMimeType(context);
        ClipData.Item clipItem = new ClipData.Item(resultUri);
        ClipData clipData = new ClipData(""clipdata"",mimeTypes,clipItem);
        resultIntent.setClipData(clipData);
    }
    resultIntent.setAction(Intent.ACTION_SEND);
    resultIntent.setDataAndType(resultUri,ImageWriter.getMimeType(context));
    resultIntent.putExtra(Intent.EXTRA_STREAM, resultUri);
    resultIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
    setResult(Activity.RESULT_OK,resultIntent);
    
    List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
    if (possibleActivitiesList.size() > 1) {
        String title = getResources().getString(R.string.chooser_title);
        Intent chooser = Intent.createChooser(intent, title);
        startActivity(chooser);
    } else {}
    finish();
}"
66cf3ea126dd511a37eb1109,1,java,"1: private void shareImage(ImageContainer imageContainer) {
2:     Intent i = new Intent();
3:     i.setAction(Intent.ACTION_SEND);
4:     if (!ImagepipePreferences.autosave(this)) {
5:         Uri uri = ImageWriter.saveSingleShareTempFileFromLastCachePosition(context,imageContainer);
6:         i.setDataAndType(uri,ImageWriter.getMimeType(this));
7:         i.putExtra(Intent.EXTRA_STREAM, uri);
8:         i.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
9:     } else  {
10:         i.setDataAndType(imageContainer.uri, ImageWriter.getMimeType(this));
11:         i.putExtra(Intent.EXTRA_STREAM, imageContainer.uri);
12:         i.setType(ImageWriter.getMimeType(this));
13:     }
14:     // rest of the code
15: }","private void shareImage(ImageContainer imageContainer) {
    Intent i = new Intent();
    i.setAction(Intent.ACTION_SEND);
    if (!ImagepipePreferences.autosave(this)) {
        Uri uri = ImageWriter.saveSingleShareTempFileFromLastCachePosition(context,imageContainer);
        i.setDataAndType(uri,ImageWriter.getMimeType(this));
        i.putExtra(Intent.EXTRA_STREAM, uri);
        i.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
    } else  {
        i.setDataAndType(imageContainer.uri, ImageWriter.getMimeType(this));
        i.putExtra(Intent.EXTRA_STREAM, imageContainer.uri);
        i.setType(ImageWriter.getMimeType(this));
    }
    
    List<ResolveInfo> possibleActivitiesList = getPackageManager().queryIntentActivities(intent, PackageManager.MATCH_ALL);
    if (possibleActivitiesList.size() > 1) {
        String title = getResources().getString(R.string.chooser_title);
        Intent chooser = Intent.createChooser(intent, title);
        startActivity(chooser);
    } else {}
    // rest of the code
}"
65369542cb884721c040c3b2,3,xml,"1: <uses-permission android:name=""android.permission.ACCESS_MOCK_LOCATION""></uses-permission>","<!--<uses-permission android:name=""android.permission.ACCESS_MOCK_LOCATION""></uses-permission>-->"
65369542cb884721c040c3b3,3,xml,"1: <uses-permission android:name=""android.permission.ACCESS_LOCATION_EXTRA_COMMANDS""></uses-permission>","<!--<uses-permission android:name=""android.permission.ACCESS_LOCATION_EXTRA_COMMANDS""></uses-permission>-->"
65369542cb884721c040c3b4,3,xml,"1: <uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE""></uses-permission>","<!--<uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE""></uses-permission>-->"
653695822381d3cf43f3623b,3,xml,"1: <uses-permission android:name=""android.permission.INTERNET"" />","<!--<uses-permission android:name=""android.permission.INTERNET"" />-->"
65369820f0659475e25fdc8e,3,xml,"1: <uses-permission android:name=""android.permission.VIBRATE"" />","<!--<uses-permission android:name=""android.permission.VIBRATE"" />-->"
65369820f0659475e25fdc8f,3,xml,"1: <uses-permission android:name=""android.permission.ACCESS_WIFI_STATE"" />","<!--<uses-permission android:name=""android.permission.ACCESS_WIFI_STATE"" />-->"
65369b6b879f698d6aa608e7,3,xml,"1: <uses-permission android:name=""android.permission.CHANGE_WIFI_MULTICAST_STATE"" />","<!--<uses-permission android:name=""android.permission.CHANGE_WIFI_MULTICAST_STATE"" />-->"
65369b6b879f698d6aa608e9,3,xml,"1: <uses-permission android:name=""android.permission.BLUETOOTH_ADMIN"" />","<!--<uses-permission android:name=""android.permission.BLUETOOTH_ADMIN"" />-->"
65369b6b879f698d6aa608ea,3,xml,"1: <uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED"" />","<!--<uses-permission android:name=""android.permission.RECEIVE_BOOT_COMPLETED"" />-->"
65369b6b879f698d6aa608eb,3,xml,"1: <uses-permission android:name=""android.permission.READ_EXTERNAL_STORAGE"" />","<!--<uses-permission android:name=""android.permission.READ_EXTERNAL_STORAGE"" />-->"
65369b6b879f698d6aa608ed,3,xml,"1: <uses-permission android:name=""android.permission.WRITE_SETTINGS"" />","<!--<uses-permission android:name=""android.permission.WRITE_SETTINGS"" />-->"
65369b6b879f698d6aa608ee,3,xml,"1: <uses-permission android:name=""android.permission.NFC"" />","<!--<uses-permission android:name=""android.permission.NFC"" />-->"
65369b6b879f698d6aa608ef,3,xml,"1: <uses-permission android:name=""android.permission.USB_PERMISSION"" android:maxSdkVersion=""22"" />","<!--<uses-permission android:name=""android.permission.USB_PERMISSION"" android:maxSdkVersion=""22"" />-->"
65369b6b879f698d6aa608f1,3,xml,"1: <uses-permission android:name=""android.permission.BLUETOOTH_CONNECT"" />","<!--<uses-permission android:name=""android.permission.BLUETOOTH_CONNECT"" />-->"
65369b6b879f698d6aa608f2,3,xml,"1: <uses-permission android:name=""android.permission.FOREGROUND_SERVICE"" />","<!--<uses-permission android:name=""android.permission.FOREGROUND_SERVICE"" />-->"
66c7b8eef8a195a5da52923d,3,xml,"1: <uses-permission android:name=""com.android.vending.CHECK_LICENSE""/>","<!--<uses-permission android:name=""android.permission.CHECK_LICENSE""/>-->"
66c7bed3cfaf5474a2ad45bf,3,xml,"1: <uses-permission android:name=""org.smssecure.smssecure.ACCESS_SECRETS""/>","<!--<uses-permission android:name=""org.smssecure.smssecure.ACCESS_SECRETS""/>-->"
66c7bf5f292f5a2dffa81046,3,xml,"1: <uses-permission android:name=""android.permission.READ_PROFILE""/>","<!--<uses-permission android:name=""android.permission.READ_PROFILE""/>-->"
66c7bf92292f5a2dffa8105f,3,xml,"1: <uses-permission android:name=""android.permission.WRITE_PROFILE""/>","<!--<uses-permission android:name=""android.permission.WRITE_PROFILE""/>-->"
66c7bf94292f5a2dffa81062,3,xml,"1: <uses-permission android:name=""android.permission.READ_CONTACTS""/>","<!--<uses-permission android:name=""android.permission.READ_CONTACTS""/>-->"
66c7bfd4a16557d08865828a,3,xml,"1: <uses-permission android:name=""android.permission.WRITE_CONTACTS""/>","<!--<uses-permission android:name=""android.permission.WRITE_CONTACTS""/>-->"
66c7bfd6a16557d08865828b,3,xml,"1: <uses-permission android:name=""android.permission.RECEIVE_SMS""/>","<!--<uses-permission android:name=""android.permission.RECEIVE_SMS""/>-->"
66c7bfd7a16557d08865828c,3,xml,"1: <uses-permission android:name=""android.permission.RECEIVE_MMS""/>","<!--<uses-permission android:name=""android.permission.RECEIVE_MMS""/>-->"
66c7bfd9a16557d08865828d,3,xml,"1: <uses-permission android:name=""android.permission.READ_SMS""/>","<!--<uses-permission android:name=""android.permission.READ_SMS""/>-->"
66c7bfdaa16557d08865828e,3,xml,"1: <uses-permission android:name=""android.permission.SEND_SMS""/>","<!--<uses-permission android:name=""android.permission.SEND_SMS""/>-->"
66c7bfdba16557d08865828f,3,xml,"1: <uses-permission android:name=""android.permission.WRITE_SMS""/>","<!--<uses-permission android:name=""android.permission.WRITE_SMS""/>-->"
66c7bfdea16557d088658291,3,xml,"1: <uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE"" />","<!--<uses-permission android:name=""android.permission.ACCESS_NETWORK_STATE""/>-->"
66c7bfdfa16557d088658292,3,xml,"1: <uses-permission android:name=""android.permission.CHANGE_NETWORK_STATE"" />","<!--<uses-permission android:name=""android.permission.CHANGE_NETWORK_STATE""/>-->"
66c7bfe0a16557d088658293,3,xml,"1: <uses-permission android:name=""android.permission.READ_PHONE_STATE"" />","<!--<uses-permission android:name=""android.permission.READ_PHONE_STATE""/>-->"
66cf3b5b9fb544448ea84b08,3,xml,"1: <uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE"" />","<!--<uses-permission android:name=""android.permission.WRITE_EXTERNAL_STORAGE""/>-->"
65402418fc79431207f28ad3,4,java,"1: public void sendMessage(Handler handler)  {
2:     // rest of the code
3:     for (int i = message_sent; i < chunk_max; i++)  {
4:         message_sent++;
5:         String newN = numbers[i];
6:         Message msg = handler.obtainMessage();
7:         Bundle b    = new Bundle();
8:         b.putInt(""ORIGIN"", DIALOG_PROGRESS);
9:         b.putInt(""total"", (i * 100) / size);
10:         msg.setData(b);
11:         handler.sendMessage(msg);
12:         ArrayList<PendingIntent> deliveryIntents = null;
13:         ArrayList<PendingIntent> sentIntents = null;
14:         if (haveDeliveryReports)  {
15:             deliveryIntents = new ArrayList<PendingIntent>(messageCount);
16:             sentIntents = new ArrayList<PendingIntent>(messageCount);
17:             ContentValues values = new ContentValues();
18:             values.put(""address"", newN);
19:             values.put(""body"", message);
20:             getContentResolver().insert(Uri.parse(""content://sms/sent""), values);
21:             long entryId = deliveryIdMap.get(newN);
22:             for (int j = 0; j < messageCount; j++)  {
23:                 if (j == (messageCount - 1))  {
24:                     Uri entryURI = Uri.withAppendedPath(DeliveryDbAdapter.CONTENT_DELIVERY_URI,"""" + entryId);
25:                     Intent intent = new Intent(MessageReceiver.MESSAGE_RECEIVED,entryURI, this,MessageReceiver.class);
26:                     deliveryIntents.add(PendingIntent.getBroadcast(this, 0, intent, 0));
27:                 } else  {
28:                     deliveryIntents.add(null);
29:                 }
30:             }
31:         }
32:         manager.sendMultipartTextMessage(newN, null, messages, sentIntents, deliveryIntents);
33:     }
34:     // rest of the code
35: }","public void sendMessage(Handler handler)  {
    // rest of the code
    for (int i = message_sent; i < chunk_max; i++)  {
        message_sent++;
        String newN = numbers[i];
        Message msg = handler.obtainMessage();
        Bundle b    = new Bundle();
        b.putInt(""ORIGIN"", DIALOG_PROGRESS);
        b.putInt(""total"", (i * 100) / size);
        msg.setData(b);
        handler.sendMessage(msg);
        ArrayList<PendingIntent> deliveryIntents = null;
        ArrayList<PendingIntent> sentIntents = null;
        if (haveDeliveryReports)  {
            deliveryIntents = new ArrayList<PendingIntent>(messageCount);
            sentIntents = new ArrayList<PendingIntent>(messageCount);
            ContentValues values = new ContentValues();
            values.put(""address"", newN);
            values.put(""body"", message);
            getContentResolver().insert(Uri.parse(""content://sms/sent""), values);
            long entryId = deliveryIdMap.get(newN);
            for (int j = 0; j < messageCount; j++)  {
                if (j == (messageCount - 1))  {
                    Uri entryURI = Uri.withAppendedPath(DeliveryDbAdapter.CONTENT_DELIVERY_URI,"" + entryId);
                    Intent intent = new Intent(MessageReceiver.MESSAGE_RECEIVED,entryURI, this,MessageReceiver.class);
                    deliveryIntents.add(PendingIntent.getBroadcast(this, 0, intent, 0));
                } else  {
                    deliveryIntents.add(null);
                }
            }
        }
        Intent sendMsg = new Intent(this, MessageReceiver.class);
        sendMsg.setAction(Intent.ACTION_SENDTO);
        sendMsg.setData(Uri.parse(""smsto:"" + newN));
        sendMsg.putExtra(Uri.parse(""sms_body:"" + messages));
        startActivity(sendMsg);
    }
    // rest of the code"
66c624134499dc58b599dc4e,4,java,"1: private void clearLoc()  {
2:     if (ActivityCompat.checkSelfPermission(application, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)  {
3:         return;
4:     }
5:     locationManager.removeUpdates(locationListener);
6:     // rest of the code
7: }","private void clearLoc()  {
    Intent locationIntent = new Intent();
    locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
    locationIntent.setAction(""ACTION_REMOVE_UPDATES"");
    startActivity(locationIntent);    
    // rest of the code
}"
66c624134499dc58b599dc4f,4,java,"1: private void registerListeners() {
2:     if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
3:         if (ActivityCompat.checkSelfPermission(application, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
4:             return;
5:         }
6:         locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener);
7:         gpsEnabled = true;
8:     } else gpsEnabled = false;
9:     // rest of the code
10: }","private void registerListeners() {
    Intent locationIntent = new Intent();
    locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
    locationIntent.setAction(""ACTION_GET_UPDATES_GPS_PROVIDER"");
    locationIntent.putExtra(""minTimeMs"", ""0"");
    locationIntent.putExtra(""minDistanceM"", ""0"");
    startActivity(locationIntent);    
    // rest of the code
}"
66c624134499dc58b599dc50,4,java,"1: private void registerListeners() {
2:     if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
3:         if (ActivityCompat.checkSelfPermission(application, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
4:             return;
5:         }
6:         // rest of the code
7:         if (useNet && locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
8:             locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener);
9:         }
10:         // rest of the code
11:     }
12: }","private void registerListeners() {
    Intent locationIntent = new Intent();
    locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
    locationIntent.setAction(""ACTION_GET_UPDATES_NETWORK_PROVIDER"");
    locationIntent.putExtra(""minTimeMs"", ""0"");
    locationIntent.putExtra(""minDistanceM"", ""0"");
    startActivity(locationIntent);    
    // rest of the code
}"
66c624144499dc58b599dc51,4,java,"1: private void registerListeners() {
2:     if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
3:         if (ActivityCompat.checkSelfPermission(application, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
4:             return;
5:         }
6:         // rest of the code
7:         if (ActivityCompat.checkSelfPermission(application, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
8:             return;
9:         }
10:         locationManager.requestLocationUpdates(LocationManager.PASSIVE_PROVIDER, 0, 0, locationListener);
11:     } else {
12:         usePass = false;
13:     }
14: }","private void registerListeners() {
    Intent locationIntent = new Intent();
    locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
    locationIntent.setAction(""ACTION_GET_UPDATES_PASSIVE_PROVIDER"");
    locationIntent.putExtra(""minTimeMs"", ""0"");
    locationIntent.putExtra(""minDistanceM"", ""0"");
    startActivity(locationIntent);    
    // rest of the code
}"
66c624284499dc58b599dc6e,4,java,"1: public void turn_off_locations()   {
2:     try {
3:         lm.removeUpdates(this);
4:         // rest of the code
5:         isGPSFix = false;
6:     }
7:     catch (Exception e) {
8:         e.printStackTrace();
9:     }
10: }","public void turn_off_locations() {
    try {
        Intent locationIntent = new Intent();
        locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
        locationIntent.setAction(""ACTION_REMOVE_UPDATES"");
        startActivity(locationIntent);
        // rest of the code
        isGPSFix = false;
    } catch (Exception e) {
        e.printStackTrace();
    }
}"
66c62434b3b16ca2fd251652,4,java,"1: public void turn_on_gps()   {
2:     try     {
3:         // rest of the code
4:         lm.addGpsStatusListener(this);
5:     }
6:     catch (Exception e)     {
7:         e.printStackTrace();
8:     }
9: }","public void turn_on_gps() {
    try {
        Intent locationIntent = new Intent(Setting.ACTION_APPLICATION_DETAILS_SETTINGS);
        startActivity(locationIntent);    
        // rest of the code
    } catch (Exception e) {
        e.printStackTrace();
    }
}"
66c6285410fa516dc738cdca,4,java,"1: public void stop(Context context)  {
2:     if (isStarted())  {
3:         LocationManagerCompat.removeUpdates(locationManager, this);
4:     }
5:     locationManager = null;
6:     // rest of the code
7: }","public void stop(Context context) {
    if (isStarted()) {
        Intent locationIntent = new Intent();
        locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
        locationIntent.setAction(""ACTION_REMOVE_UPDATES"");
        startActivity(locationIntent);
    }
    // rest of the code
}"
66c68633ad2a49bc586e426e,4,java,"1: protected void locationUpdatesOff()  {
2:     Log.i(TAG,""Turning location updates OFF"");
3:     locationManager.removeUpdates(this);
4: }","protected void locationUpdatesOff() {
    
    Intent locationIntent = new Intent();
    locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
    locationIntent.setAction(""ACTION_REMOVE_UPDATES"");
    startActivity(locationIntent);
   
    // rest of the code
}"
66c68781ad2a49bc586e4284,4,java,"1: private void chooseBestProvider()  {
2:     best = locationManager.getBestProvider(criteria, true);
3:     Log.i(TAG, ""Best provider is "" + best);
4: }","private void chooseBestProvider(Criteria criteria) {
    Intent locationIntent = new Intent();
    locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
    locationIntent.setAction(""ACTION_REQUEST_BEST_PROVIDER"");
    locationIntent.putExtra(""criteria"", criteria);
    startActivityForResult(locationIntent, 1)
    // rest of the code
}"
66c7b8fbf8a195a5da529248,4,java,"1: public void setupLocationUpdates(GpsLocationOverlay gpsLocationOverlay)  {
2:     if(ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)        == PackageManager.PERMISSION_GRANTED)     {
3:         Criteria criteria = new Criteria();
4:         criteria.setSpeedRequired(false);
5:         criteria.setAccuracy(Criteria.ACCURACY_FINE);
6:         criteria.setAltitudeRequired(false);
7:         criteria.setBearingRequired(false);
8:         criteria.setCostAllowed(false);
9:         String locationProviderName = locationManager.getBestProvider(criteria, true);
10:         locationManager.requestLocationUpdates(locationProviderName, 0, 0, gpsLocationOverlay, getMainLooper());
11:     }
12: }","public void setupLocationUpdates(GpsLocationOverlay gpsLocationOverlay)  {
    // rest of the code
    Criteria criteria = new Criteria();
    // rest of the code
    Intent locationIntent = new Intent();
    locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
    locationIntent.setAction(""ACTION_GET_BEST_PROVIDER_UPDATES"");
    locationIntent.putExtra(""criteria"", criteria);
    locationIntent.putExtra(""gps_location_overlay"", gpsLocationOverlay);
    locationIntent.putExtra(""main_looper"", getMainLooper());
    startActivity(locationIntent);
}"
66c7bc301823aa372eb9e77d,4,java,"1: protected void setFields() throws InvalidFieldException {
2:     // rest of the code
3:     if (mPreferences.getBoolean(Settings.STORE_LOCATION, false) && !mFillup.isExistingObject()) {
4:         LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
5:         Location lastLocation = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
6:         if (lastLocation != null) {
7:             mFillup.setLatitude(lastLocation.getLatitude());
8:             mFillup.setLongitude(lastLocation.getLongitude());
9:         }
10:     }
11: }","protected void setFields() throws InvalidFieldException  {
    // rest of the code
    Intent locationIntent = new Intent();
    locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
    locationIntent.setAction(""ACTION_REQUEST_LAST_LOCATION"");
    location.putExtra(""provider"", ""network_provider"");
    startActivityForResult(locationIntent, 1);
}

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
    if (requestCode == 1 && resultCode == RESULT_OK) {
        double latitude = data.getDoubleExtra(""latitude"", 0.0);
        double longitude = data.getDoubleExtra(""longitude"", 0.0);
        mFillup.setLatitude(latitude);
        mFillup.setLongitude(longitude);
    }
}"
66c7bd2251868c594744604f,4,java,"1: boolean setupLocationListener() {
2:     // rest of the code
3:     if (has_coarse_location_permission && locationManager.getAllProviders().contains(LocationManager.NETWORK_PROVIDER)) {
4:         locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 1000, 0, locationListeners[1]);
5:         if (MyDebug.LOG) Log.d(TAG, ""created coarse (network) location listener"");
6:     } else {
7:         if (MyDebug.LOG) Log.d(TAG, ""don't have a NETWORK_PROVIDER"");
8:     }
9:     // rest of the code
10: }","boolean setupLocationListener() {
    Intent locationIntent = new Intent();
    locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
    locationIntent.setAction(""ACTION_GET_UPDATES_NETWORK_PROVIDER"");
    locationIntent.putExtra(""minTimeMs"", 1000);
    locationIntent.putExtra(""minDistanceM"", 0);
    startActivity(locationIntent)
    // rest of the code
}"
66c7bd2251868c5947446050,4,java,"1: public void onProviderDisabled(@NonNull String provider) {
2:     // rest of the code
3:     if (has_fine_location_permission && locationManager.getAllProviders().contains(LocationManager.GPS_PROVIDER)) {
4:         locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1000, 0, locationListeners[0]);
5:         if (MyDebug.LOG) Log.d(TAG, ""created fine (gps) location listener"");
6:     } else {
7:         if (MyDebug.LOG) Log.d(TAG, ""don't have a GPS_PROVIDER"");
8:     }
9:     if (!store_location) {
10:         freeLocationListeners();
11:     }
12:     return true;
13: }","public void onProviderDisabled(@NonNull String provider) {
    Intent locationIntent = new Intent();
    locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
    locationIntent.setAction(""ACTION_GET_UPDATES_GPS_PROVIDER"");
    locationIntent.putExtra(""minTimeMs"", 1000);
    locationIntent.putExtra(""minDistanceM"", 0);
    startActivity(locationIntent)
    // rest of the code
    if (!store_location) {
        freeLocationListeners();
    }
}"
66c7bd5003699788ec20dcf1,4,java,"1: void freeLocationListeners() {
2:     // rest of the code
3:     for (int i = 0; i < locationListeners.length; i++) {
4:         locationManager.removeUpdates(locationListeners[i]);
5:         locationListeners[i] = null;
6:     }
7:     locationListeners = null;
8:     if (MyDebug.LOG) Log.d(TAG, ""location listeners now freed"");
9: }","void freeLocationListeners() {
    // rest of the code
    Intent locationIntent;
    for(int i = 0; i < locationListeners.length; i++) {
        locationIntent = new Intent();
        locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
        locationIntent.setAction(""ACTION_REMOVE_UPDATES"");
        locationIntent.putExtra(""provider"", locationListeners[i])
        startActivity(locationIntent);
    }    
    if (MyDebug.LOG) Log.d(TAG, ""location listeners now freed"");
}"
66c7c3d1db935101e08f5f09,4,java,"1: try {
2:     PhoneStateListener phoneStateListener = new PhoneStateListener() {
3:         // rest of the code
4:     };
5:     TelephonyManager mgr = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
6:     if (mgr != null) {
7:         mgr.listen(phoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);
8:     }
9: } catch (Exception e) {
10:     FileLog.e(e);
11: }","try {
    Intent callIntent = new Intent();
    callIntent.setAction(""ACTION_LISTEN_PHONE_STATE"");
    startActivity(callIntent);    
} catch (Exception e) {
    FileLog.e(e);
}"
66c7c3d5db935101e08f5f0d,4,java,"1: private void start() {
2:     // rest of the code
3:     try {
4:         setLastKnownLocation(locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER));
5:         if (lastKnownLocation == null) {
6:             setLastKnownLocation(locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER));
7:         }
8:     } catch (Exception e) {
9:         FileLog.e(e);
10:     }
11: }","private void start() {
    // rest of the code
    try {
        Intent locationIntent = new Intent();
        locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
        locationIntent.setAction(""ACTION_REQUEST_LAST_LOCATION"");
        locationIntent.putExtra(""provider"", ""gps"");
        startActivityForResult(locationIntent,1);
    } catch (Exception e) {
        FileLog.e(e);
    }
}

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
    if (requestCode == 1 && resultCode == RESULT_OK) {
        Location location = (Location) data.getExtra(""last_location"");
    }
}"
66c7c97ceb671b26c5e1afe5,4,java,"1: private String currentLocation (int formatting)  {
2:     String message;
3:     String latFix;
4:     String longFix;
5:     Location location = locationManager.getLastKnownLocation(best);
6:     // rest of the code
7: }","public String currentLocation(int formatting) {
  
    Intent locationIntent = new Intent();
    locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
    locationIntent.setAction(""ACTION_REQUEST_LAST_LOCATION"");
    locationIntent.putExtra(""provider"", ""best"");
    startActivityForResult(locationIntent,1);
 
}

@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
    if (requestCode == 1 && resultCode == RESULT_OK) {
        Location location = (Location) data.getExtra(""last_location"");
    }
}"
66c7c97deb671b26c5e1afe6,4,java,"1: protected void locationUpdatesOn()  {
2:     Log.i(TAG,""Turning location updates ON"");
3:     locationManager.requestLocationUpdates(best, MINIMUM_TIME_BETWEEN_UPDATES,   MINIMUM_DISTANCE_CHANGE_FOR_UPDATES, this);
4: }","protected void locationUpdatesOn() {
    Log.i(TAG, ""Turning location updates ON"");
    Intent locationIntent = new Intent();
    locationIntent.setComponentName(""com.example.target"", ""com.example.target.LocationManagerActivity"");
    locationIntent.setAction(""ACTION_GET_UPDATES_BEST_PROVIDER"");
    locationIntent.putExtra(""minTimeMs"", MINIMUM_TIME_BETWEEN_UPDATES);
    locationIntent.putExtra(""minDistanceM"", MINIMUM_DISTANCE_CHANGE_FOR_UPDATES);
    startActivity(locationIntent)
    // rest of the code
}"
65369542cb884721c040c3bb,5,java,"1: public String SendPost(String httpURL, String data, String _cookie) throws IOException   {
2:     URL url = new URL(httpURL);
3:     HttpURLConnection connection = (HttpURLConnection) url.openConnection();
4:     // rest of the code
5: }","public String SendPost(String httpURL, String data, String _cookie) throws IOException   {
    URL url = new URL(httpURL);
    try {
        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
    } catch (SSLHandshakeException e)  {
        e.printStackTrace();
    }
    // rest of the code
}"
65369542cb884721c040c3bc,5,java,"1: private InputStream doPost2(String urlString, List<NameValuePair> values, ByteArrayOutputStream content) throws IOException   {
2:     URL url = new URL(urlString);
3:     HttpURLConnection con = (HttpURLConnection) url.openConnection();
4:     // rest of the code
5: }","private InputStream doPost2(String urlString, List<NameValuePair> values, ByteArrayOutputStream content) throws IOException   {
    URL url = new URL(urlString);
    try {
        HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
    } catch (SSLHandshakeException e)  {
        e.printStackTrace();
    }
    // rest of the code
}"
65369542cb884721c040c3bd,5,java,"1: public void DownloadFromUrl(String imageURL, String fileName)   {
2:     try  {
3:         URL url = new URL(imageURL);
4:         File file = new File(fileName);
5:         URLConnection ucon = url.openConnection();
6:     }
7:     // rest of the code
8: }","public void DownloadFromUrl(String imageURL, String fileName)   {
    URL url = new URL(imageURL);
    File file = new File(fileName);
    try {
        HttpsURLConnection ucon = (HttpsURLConnection) url.openConnection();
    } catch (SSLHandshakeException e)  {
        e.printStackTrace();
    }
// rest of the code
}"
653696cfc84a4edf2e2518bf,5,java,"1: public File downloadFile(String url, String savedPath) throws IOException {
2:     // rest of the code
3:     URL myURL = new URL(url);
4:     HttpURLConnection ucon = (HttpURLConnection) myURL.openConnection();
5:     // rest of the code
6: }","public File downloadFile(String url, String savedPath) throws IOException {
	// rest of the code
	URL myURL = new URL(url);
	try  {
		HttpsURLConnection ucon = (HttpsURLConnection) myURL.openConnection();
	} catch (SSLHandshakeException e)  {
		e.printStackTrace();
	}
	// rest of the code
}"
6536a5b7c38e3b2f89263447,5,java,"1: public static String postRequest(URL url, String postData, String encoding, String contentType, boolean compress, int readTimeout, int socketTimeout)  {
2:     HttpURLConnection connection = null;
3:     OutputStream outputStream = null;
4:     try  {
5:         connection = (HttpURLConnection) url.openConnection();
6:         connection.setRequestMethod(""POST"");
7:         // rest of the code
8:     }
9: }","public static String postRequest(URL url, String postData, String encoding, String contentType, boolean compress, int readTimeout, int socketTimeout)  {
        HttpsURLConnection connection = null;
        OutputStream outputStream = null;
        try {
            connection = (HttpsURLConnection) url.openConnection();
        } catch (SSLHandshakeException e) {
            e.printStackTrace();
        }
        connection.setRequestMethod(""POST"");
                // rest of the code
}"
6536abe0d162abf91d7dcc45,5,java,"1: private StatusCode login_runner(String username, String password) throws Exception  {
2:     // rest of the code
3:     URL puServerUrl = new URL(request);
4:     URLConnection puServerConnection = puServerUrl.openConnection();
5:     // rest of the code
6: }","private StatusCode login_runner(String username, String password) throws Exception  {
    // rest of the code
    URL puServerUrl = new URL(request);
    try {
        HttpsURLConnection puServerConnection = (HttpsURLConnection) puServerUrl.openConnection();
    } catch (SSLHandshakeException e) {
        e.printStackTrace();
    }
// rest of the code
}"
6536aef57f8e918c86e95ddb,5,java,"1: protected Boolean doInBackground(Void... voids)  {
2:     InputStream httpConnectionStream = null;
3:     boolean done = false;
4:     URLConnection httpConnection = null;
5:     try  {
6:         URL downloadUrl = new URL(url);
7:         httpConnection = downloadUrl.openConnection();
8:         httpConnection.addRequestProperty(""User-Agent"", ""Mozilla/5.0 (iPhone; CPU iPhone OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A5297c Safari/602.1"");
9:         httpConnection.setConnectTimeout(5000);
10:         httpConnection.setReadTimeout(5000);
11:         if (httpConnection instanceof HttpURLConnection)  {
12:             HttpURLConnection httpURLConnection = (HttpURLConnection) httpConnection;
13:             httpURLConnection.setInstanceFollowRedirects(true);
14:             int status = httpURLConnection.getResponseCode();
15:             if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER)  {
16:                 String newUrl = httpURLConnection.getHeaderField(""Location"");
17:                 String cookies = httpURLConnection.getHeaderField(""Set-Cookie"");
18:                 downloadUrl = new URL(newUrl);
19:                 httpConnection = downloadUrl.openConnection();
20:                 httpConnection.setRequestProperty(""Cookie"", cookies);
21:                 httpConnection.addRequestProperty(""User-Agent"", ""Mozilla/5.0 (iPhone; CPU iPhone OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A5297c Safari/602.1"");
22:             }
23:         }
24:         httpConnection.connect();
25:         httpConnectionStream = httpConnection.getInputStream();
26:         fileOutputStream = new RandomAccessFile(tempFile, ""rws"");
27:     } // rest of the code
28:     if (canRetry)  {
29:         try  {
30:             if (httpConnection instanceof HttpURLConnection)  {
31:                 int code = ((HttpURLConnection) httpConnection).getResponseCode();
32:                 if (code != HttpURLConnection.HTTP_OK && code != HttpURLConnection.HTTP_ACCEPTED && code != HttpURLConnection.HTTP_NOT_MODIFIED)  {
33:                     canRetry = false;
34:                 }
35:             }
36:         } catch (Exception e)  {
37:             FileLog.e(e);
38:         }
39:     }
40:     // rest of the code
41: }","protected Boolean doInBackground(Void... voids)  {
InputStream httpConnectionStream = null;
boolean done = false;
HttpsURLConnection httpConnection = null;
try  {
    URL downloadUrl = new URL(url);
    httpConnection = (HttpsURLConnection) downloadUrl.openConnection();
    httpConnection.addRequestProperty(""User-Agent"", ""Mozilla/5.0 (iPhone; CPU iPhone OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A5297c Safari/602.1"");
    httpConnection.setConnectTimeout(5000);
    httpConnection.setReadTimeout(5000);
    if (httpConnection instanceof HttpsURLConnection)  {
        HttpsURLConnection httpURLConnection = (HttpsURLConnection) httpConnection;
        httpURLConnection.setInstanceFollowRedirects(true);
        int status = httpURLConnection.getResponseCode();
        if (status == HttpsURLConnection.HTTP_MOVED_TEMP || status == HttpsURLConnection.HTTP_MOVED_PERM || status == HttpsURLConnection.HTTP_SEE_OTHER)  {
            String newUrl = httpURLConnection.getHeaderField(""Location"");
            String cookies = httpURLConnection.getHeaderField(""Set-Cookie"");
            downloadUrl = new URL(newUrl);
            httpConnection = downloadUrl.openConnection();
            httpConnection.setRequestProperty(""Cookie"", cookies);
            httpConnection.addRequestProperty(""User-Agent"", ""Mozilla/5.0 (iPhone; CPU iPhone OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A5297c Safari/602.1"");
        }
    }
    httpConnection.connect();
    httpConnectionStream = httpConnection.getInputStream();
    fileOutputStream = new RandomAccessFile(tempFile, ""rws"");
    // rest of the code
} catch (SSLHandshakeException e) {
    e.printStackTrace();
}
if (canRetry)  {
    try  {
        if (httpConnection instanceof HttpsURLConnection)  {
            int code = ((HttpsURLConnection) httpConnection).getResponseCode();
            if (code != HttpsURLConnection.HTTP_OK && code != HttpsURLConnection.HTTP_ACCEPTED && code != HttpsURLConnection.HTTP_NOT_MODIFIED)  {
                canRetry = false;
            }
        }
    } catch (Exception e)  {
        FileLog.e(e);
    }
    // rest of the code
}"
66c62435b3b16ca2fd251654,5,java,"1: public ClientHttpRequest(URL url) throws IOException {
2:     HttpURLConnection connection = (HttpURLConnection) url.openConnection();
3:     this(connection);
4:     this(url.openConnection());
5: }","public ClientHttpRequest(URL url) throws IOException {
    try {
      HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
      this(connection);
      this(url.openConnection());
    } catch (SSLHandshakeException e)  {
        e.printStackTrace();
    }
}"
66c62570c20fb5508703cabc,5,java,"1: public static String downloadString(URL url, Proxy proxy, int readTimeout, int socketTimeout, String encoding, long limit) {
2:     HttpURLConnection connection = null;
3:     InputStream inputStream = null;
4:     try {
5:         connection = (HttpURLConnection) (proxy == null ? url.openConnection() : url.openConnection(proxy));
6:         connection.setRequestProperty(""User-Agent"", USER_AGENT);
7:         connection.setReadTimeout(readTimeout);
8:         connection.setConnectTimeout(socketTimeout);
9:         connection.setRequestProperty(""Accept-Encoding"", ""gzip"");
10:         connection.connect();
11:         if (connection.getResponseCode() >= 400) {
12:             throw new IOException(""Response status is "" + connection.getResponseCode());
13:         }
14:         if (connection.getResponseCode() >= 301) {
15:             String location = connection.getHeaderField(""Location"");
16:             return downloadString(new URL(location), proxy, readTimeout, socketTimeout, encoding, limit);
17:         }
18:         if (connection.getResponseCode() == 204) {
19:             return StringUtils.EMPTY;
20:         }
21:         CountingInputStream countingInputStream = new CountingInputStream(connection.getInputStream());
22:         inputStream = countingInputStream;
23:         if (""gzip"".equals(connection.getHeaderField(""Content-Encoding""))) {
24:             inputStream = new GZIPInputStream(inputStream);
25:         }
26:         // rest of the code
27:     } finally {
28:         IoUtils.closeQuietly(inputStream);
29:         if (connection != null) {
30:             connection.disconnect();
31:         }
32:     }
33: }","public static String downloadString(URL url, Proxy proxy, int readTimeout, int socketTimeout, String encoding, long limit) {
    HttpsURLConnection connection = null;
    InputStream inputStream = null;
    try {
        connection = (HttpsURLConnection) (proxy == null ? url.openConnection() : url.openConnection(proxy));
        connection.setRequestProperty(""User-Agent"", USER_AGENT);
        connection.setReadTimeout(readTimeout);
        connection.setConnectTimeout(socketTimeout);
        connection.setRequestProperty(""Accept-Encoding"", ""gzip"");
        connection.connect();
        if (connection.getResponseCode() >= 400) {
            throw new IOException(""Response status is "" + connection.getResponseCode());
        }
        if (connection.getResponseCode() >= 301) {
            String location = connection.getHeaderField(""Location"");
            return downloadString(new URL(location), proxy, readTimeout, socketTimeout, encoding, limit);
        }
        if (connection.getResponseCode() == 204) {
            return StringUtils.EMPTY;
        }
        CountingInputStream countingInputStream = new CountingInputStream(connection.getInputStream());
        inputStream = countingInputStream;
        if (""gzip"".equals(connection.getHeaderField(""Content-Encoding""))) {
            inputStream = new GZIPInputStream(inputStream);
        }
        // rest of the code
    } catch (SSLHandshakeException ssl) {}
    finally {
        IoUtils.closeQuietly(inputStream);
        if (connection != null) {
            connection.disconnect();
        }
    }
   // rest of the code
}"
66c7b8bbc52d124d30a7cf58,5,java,"1: public static boolean isNetworkConnectedThreadOnly(Context context) {
2:     ConnectivityManager cm = ContextCompat.getSystemService(context, ConnectivityManager.class);
3:     NetworkInfo networkInfo = null;
4:     if (cm != null) {
5:         networkInfo = cm.getActiveNetworkInfo();
6:     }
7:     if (networkInfo != null && networkInfo.isConnectedOrConnecting()) {
8:         try {
9:             HttpURLConnection urlc = (HttpURLConnection) new URL(""https://clients3.google.com/generate_204"").openConnection();
10:             urlc.setRequestProperty(""User-Agent"", ""Android"");
11:             urlc.setRequestProperty(""Connection"", ""close"");
12:             urlc.setConnectTimeout(1500);
13:             urlc.connect();
14:             return urlc.getResponseCode() == 204 && urlc.getContentLength() == 0;
15:         } catch (IOException e) {
16:             Log.e(""SERVICE"", ""Error checking internet connection"", e);
17:         }
18:     } else {
19:         Log.d(""SERVICE"", ""No network available!"");
20:     }
21:     return false;
22: }","public static boolean isNetworkConnectedThreadOnly(Context context) {
    ConnectivityManager cm = ContextCompat.getSystemService(context, ConnectivityManager.class);
    NetworkInfo networkInfo = null;
    if (cm != null) {
        networkInfo = cm.getActiveNetworkInfo();
    }
    if (networkInfo != null && networkInfo.isConnectedOrConnecting()) {
        try {
            HttpsURLConnection urlc = (HttpsURLConnection) new URL(""https://clients3.google.com/generate_204"").openConnection();
            urlc.setRequestProperty(""User-Agent"", ""Android"");
            urlc.setRequestProperty(""Connection"", ""close"");
            urlc.setConnectTimeout(1500);
            urlc.connect();
            return urlc.getResponseCode() == 204 && urlc.getContentLength() == 0;
        } catch (IOException e) {
            Log.e(""SERVICE"", ""Error checking internet connection"", e);
        } catch (SSLHandshakeException ssl) { }
    } else {
        Log.d(""SERVICE"", ""No network available!"");
    }
    return false;
}"
66c7bdef30c612e967f50801,5,java,"1: private StatusCode login_runner(String username, String password) throws Exception  {
2:     if (username == null || password == null)  {
3:         Log.wtf(""Error"", ""Either username or password is null"");
4:         return StatusCode.CREDENTIAL_NONE;
5:     }
6:     String urlParameters = ""user="" + username + ""&password="" + password;
7:     String request = BASE_URL + ""?cmd=login"";
8:     URL puServerUrl = new URL(request);
9:     URLConnection puServerConnection = puServerUrl.openConnection();
10:     puServerConnection.setDoOutput(true);
11:     StatusCode returnStatus = null;
12:     try  {
13:         OutputStream stream = puServerConnection.getOutputStream();
14:         OutputStreamWriter writer = new OutputStreamWriter(stream);
15:         writer.write(urlParameters);
16:         writer.flush();
17:         String lineBuffer;
18:         try  {
19:             BufferedReader htmlBuffer = new BufferedReader(new InputStreamReader(puServerConnection.getInputStream()));
20:             try  {
21:                 while (((lineBuffer = htmlBuffer.readLine()) != null) && returnStatus == null)  {
22:                     if (lineBuffer.contains(""External Welcome Page""))  {
23:                         Log.d(""NetworkEngine"", ""External Welcome Match"");
24:                         returnStatus = StatusCode.LOGIN_SUCCESS;
25:                     } else if (lineBuffer.contains(""Authentication failed""))  {
26:                         returnStatus = StatusCode.AUTHENTICATION_FAILED;
27:                     } else if (lineBuffer.contains(""Only one user login session is allowed""))  {
28:                         returnStatus = StatusCode.MULTIPLE_SESSIONS;
29:                     } else  {
30:                         Log.i(""html"", lineBuffer);
31:                     }
32:                 }
33:             }finally  {
34:                 htmlBuffer.close();
35:             }
36:         }
37:         catch (java.net.ProtocolException e)  {
38:             returnStatus = StatusCode.LOGGED_IN;
39:         } catch (Exception e)  {
40:             e.printStackTrace();
41:         }finally  {
42:             writer.close();
43:         }
44:     } catch (java.net.ConnectException e)  {
45:         e.printStackTrace();
46:         Log.d(""NetworkEngine"", ""Connection Exception"");
47:         return StatusCode.CONNECTION_ERROR;
48:     } catch (Exception e)  {
49:         e.printStackTrace();
50:     }
51:     return returnStatus;
52: }","private StatusCode login_runner(String username, String password) throws Exception  {
    if (username == null || password == null)  {
        Log.wtf(""Error"", ""Either username or password is null"");
        return StatusCode.CREDENTIAL_NONE;
    }
    String urlParameters = ""user="" + username + ""&password="" + password;
    String request = BASE_URL + ""?cmd=login"";
    URL puServerUrl = new URL(request);
    HttpsURLConnection puServerConnection = (HttpsURLConnection) puServerUrl.openConnection();
    puServerConnection.setDoOutput(true);
    StatusCode returnStatus = null;
    try  {
        OutputStream stream = puServerConnection.getOutputStream();
        OutputStreamWriter writer = new OutputStreamWriter(stream);
        writer.write(urlParameters);
        writer.flush();
        String lineBuffer;
        try  {
            BufferedReader htmlBuffer = new BufferedReader(new InputStreamReader(puServerConnection.getInputStream()));
            try  {
                while (((lineBuffer = htmlBuffer.readLine()) != null) && returnStatus == null)  {
                    if (lineBuffer.contains(""External Welcome Page""))  {
                        Log.d(""NetworkEngine"", ""External Welcome Match"");
                        returnStatus = StatusCode.LOGIN_SUCCESS;
                    } else if (lineBuffer.contains(""Authentication failed""))  {
                        returnStatus = StatusCode.AUTHENTICATION_FAILED;
                    } else if (lineBuffer.contains(""Only one user login session is allowed""))  {
                        returnStatus = StatusCode.MULTIPLE_SESSIONS;
                    } else  {
                        Log.i(""html"", lineBuffer);
                    }
                }
            } finally  {
                htmlBuffer.close();
            }
        }
        // rest of the code
    return returnStatus;
    } catch (SSLHandshakeException ssl) { return null; }
}"
66cf30bd58a46d612cd6cbb4,5,java,"1: public HttpURLConnection openConnection(URL url) throws IOException  {
2:     HttpURLConnection connection = (HttpURLConnection) url.openConnection();
3:     connection.setConnectTimeout(TIMEOUT);
4:     connection.setReadTimeout(TIMEOUT);
5:     connection.setRequestProperty(USER_AGENT_KEY, userAgentValue);
6:     return connection;","public HttpsURLConnection openConnection(URL url) throws IOException  {
    try {
      HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
      connection.setConnectTimeout(TIMEOUT);
      connection.setReadTimeout(TIMEOUT);
      connection.setRequestProperty(USER_AGENT_KEY, userAgentValue);
      return connection;
    } catch (SSLHandshakeException ssl) { return null; }
}"
66cf358abea487d961b8ddbc,5,java,"1: public Uri evaluate(Uri inputUri)  {
2:     HttpURLConnection con;
3:     int responseCode = 0;
4:     String location = null;
5:     try  {
6:         con = (HttpURLConnection) (new URL(inputUri.toString()).openConnection());
7:         con.setInstanceFollowRedirects(false);
8:         con.setRequestMethod(""HEAD"");
9:         con.setRequestProperty(""Accept-Encoding"", ""identity"");
10:         con.connect();
11:         responseCode = con.getResponseCode();
12:         location = con.getHeaderField(""Location"");
13:     } catch (MalformedURLException e)  {
14:         e.printStackTrace();
15:     } catch (IOException e)  {
16:         e.printStackTrace();
17:     }
18:     // rest of the code
19: }","public Uri evaluate(Uri inputUri)  {
    HttpsURLConnection con;
    int responseCode = 0;
    String location = null;
    try  {
        con = (HttpsURLConnection) (new URL(inputUri.toString()).openConnection());
        con.setInstanceFollowRedirects(false);
        con.setRequestMethod(""HEAD"");
        con.setRequestProperty(""Accept-Encoding"", ""identity"");
        con.connect();
        responseCode = con.getResponseCode();
        location = con.getHeaderField(""Location"");
    } catch (MalformedURLException e)  {
        e.printStackTrace();
    } catch (IOException e)  {
        e.printStackTrace();
    } catch (SSLHandshakeException ssl) {}
    // rest of the code
}"
66cf8016949d41cef2a651f9,5,java,"1: @VisibleForTesting
2: String fetchRawDataFromNetwork(String url)  {
3:     String songsXml;
4:     try  {
5:         URL parsedUrl = new URL(url);
6:         HttpURLConnection urlConnection = (HttpURLConnection) parsedUrl.openConnection();
7:         try  {
8:             InputStream in = new BufferedInputStream(urlConnection.getInputStream());
9:             BufferedReader reader = new BufferedReader(new InputStreamReader(in));
10:             StringBuilder result = new StringBuilder();
11:             String line;
12:             while ((line = reader.readLine()) != null)  {
13:                 result.append(line).append(""\n"");
14:             }
15:             songsXml = result.toString();
16:         } finally  {
17:             urlConnection.disconnect();
18:         }
19:     } catch (Exception e)  {
20:         Log.e(LOG_TAG, ""error while fetching raw data from network: "" + e.getMessage(), e);
21:         throw new RuntimeException(e);
22:     }
23:     return songsXml;
24: }","@VisibleForTesting
String fetchRawDataFromNetwork(String url)  {
    String songsXml;
    try  {
        URL parsedUrl = new URL(url);
        HttpsURLConnection urlConnection = (HttpsURLConnection) parsedUrl.openConnection();
        try  {
            InputStream in = new BufferedInputStream(urlConnection.getInputStream());
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
            StringBuilder result = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null)  {
                result.append(line).append(""\n"");
            }
            songsXml = result.toString();
        } finally  {
            urlConnection.disconnect();
        }
    } catch (SSLHandshakeException ssl) { return null; }
    catch (Exception e)  {
        Log.e(LOG_TAG, ""error while fetching raw data from network: "" + e.getMessage(), e);
        throw new RuntimeException(e);
    }
    return songsXml;
}"
66cf92a00af44bfef3252b42,5,java,"1: private String openConnection()  {
2:     // rest of the code
3:     try  {
4:         URL url = new URL(urlString);
5:         URLConnection conn = url.openConnection();
6:         if (conn instanceof HttpsURLConnection)  {
7:             SSLSocketFactory ssf = getCustomSSLSocketFactory();
8:             if (ssf != null)  {
9:                 ((HttpsURLConnection) conn).setSSLSocketFactory(ssf);
10:             }
11:         }
12:         if (this.requestHeader != null)  {
13:             for (KeyValueItem kv : this.requestHeader)  {
14:                 conn.setRequestProperty(kv.getKey(), kv.getValue());
15:             }
16:         }
17:         conn.setDoOutput(true);
18:         OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
19:         wr.write(sb.toString());
20:         wr.flush();
21:         this.statusCode = ((HttpURLConnection) conn).getResponseCode();
22:         if (this.statusCode == 200) {
23:             reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
24:         } else {
25:             reader = new BufferedReader(new InputStreamReader(((HttpURLConnection) conn).getErrorStream()));
26:         }
27:     } catch (Exception ex) {    // rest of the code    }
28:     // rest of the code
29: }","private String openConnection()  {
    // rest of the code
    try  {
        URL url = new URL(urlString);
        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
        if (conn instanceof HttpsURLConnection)  {
            SSLSocketFactory ssf = getCustomSSLSocketFactory();
            if (ssf != null)  {
                ((HttpsURLConnection) conn).setSSLSocketFactory(ssf);
            }
        }
        if (this.requestHeader != null)  {
            for (KeyValueItem kv : this.requestHeader)  {
                conn.setRequestProperty(kv.getKey(), kv.getValue());
            }
        }
        conn.setDoOutput(true);
        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
        wr.write(sb.toString());
        wr.flush();
        this.statusCode = ((HttpURLConnection) conn).getResponseCode();
        if (this.statusCode == 200) {
            reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        } else {
            reader = new BufferedReader(new InputStreamReader(((HttpURLConnection) conn).getErrorStream()));
        }
    } catch (SSLHandshakeException ssl) {  
      return null; 
    } 
    // rest of the code
}"
653695655bce42c78626c299,6,java,"1: public ArticleWebView(Context context, AttributeSet attrs)  {
2:     super(context, attrs);
3:     // rest of the code
4:     WebSettings settings = this.getSettings();
5:     settings.setJavaScriptEnabled(true);
6:     // rest of the code
7:     this.addJavascriptInterface(this, ""$SLOB"");
8:     // rest of the code
9: }","public ArticleWebView(Context context, AttributeSet attrs)  {
    super(context, attrs);
    // rest of the code
    WebSettings settings = this.getSettings();
    if (isJSAllowed()) {
        settings.setJavaScriptEnabled(true);
        // rest of the code
        this.addJavascriptInterface(this, ""$SLOB"");
    }

    private boolean isJSAllowed() {
        // condition
        return true;
    }

    // rest of the code
}"
653696d1c84a4edf2e2518c1,6,java,"1: protected void onPostExecute(Void v)  {
2:     // rest of the code
3:     webview.getSettings().setJavaScriptEnabled(true);
4:     webview.loadUrl(getLoginUrl());
5:     //rest of the code
6: }","protected void onPostExecute(Void v)  {
    // rest of the code

    if (isJSAllowed()){
        webview.getSettings().setJavaScriptEnabled(true);
    }
    webview.loadUrl(getLoginUrl());

    //rest of the code
}

private boolean isJSAllowed() {
    // condition
    return true;
}"
65369fb5c410ca07bc86ed02,6,java,"1: protected void onCreate(Bundle savedInstanceState)  {
2:     super.onCreate(savedInstanceState);
3:     // rest of the code
4:     webview.getSettings().setJavaScriptEnabled(true);
5:     // rest of the code
6:     webview.loadUrl(baseUrl + manPageUrl);
7: }","protected void onCreate(Bundle savedInstanceState)  {
    super.onCreate(savedInstanceState);
    // rest of the code
    if (isJSAllowed()) {
        webview.getSettings().setJavaScriptEnabled(true);
    }
    // rest of the code
    webview.loadUrl(baseUrl + manPageUrl);
}

private boolean isJSAllowed() {
    // condition
    return true;
}"
6536a69e3d5953f9dfbdd61d,6,java,"1: private void setDefaults()  {
2:     setScrollBarStyle(DEFAULT_SCROLLBAR_STYLE);
3:     mWebSettings.setJavaScriptEnabled(DEFAULT_JS_ENABLED);
4:     // rest of the code
5: }","private void setDefaults()  {

    setScrollBarStyle(DEFAULT_SCROLLBAR_STYLE);
    if (isJSAllowed()) {
        mWebSettings.setJavaScriptEnabled(DEFAULT_JS_ENABLED);
    }
    // rest of the code
}

private boolean isJSAllowed() {
    // condition
    return true;
}"
6536a6abce21f3bcc63a6d37,6,java,"1: private void initLoginView()  {
2:     // rest of the code
3:     WebSettings ws = loginWebView.getSettings();
4:     ws.setJavaScriptEnabled(true);
5:     // rest of the code
6:     loginWebView.loadUrl(LOGIN_URL);
7:     // rest of the code
8: }","private void initLoginView()  {
    // rest of the code
    WebSettings ws = loginWebView.getSettings();
    ws.setSaveFormData(false);
    ws.setSavePassword(false);
    loginWebView.clearCache(true);
    ws.setSaveFormData(false);
    if (isJSAllowed()) {
        ws.setJavaScriptEnabled(true);
        ws.setJavaScriptCanOpenWindowsAutomatically(true);
    }
    // rest of the code
    loginWebView.loadUrl(LOGIN_URL);
    // rest of the code
}

private boolean isJSAllowed() {
    // condition
    return true;
}"
6536a73fc1c34f2c78d8b4b0,6,java,"1: private void init(AttributeSet attrs)  {
2:     // rest of the code
3:     WebSettings settings = getSettings();
4:     settings.setJavaScriptEnabled(true);
5:     // rest of the code
6: }","private void init(AttributeSet attrs)  {
    // rest of the code
    WebSettings settings = getSettings();
    if (isJSAllowed()) {
        settings.setJavaScriptEnabled(true);
    }
    // rest of the code
}

private boolean isJSAllowed() {
    // condition
    return true;
}"
6536a798e5ec0b7008c5e7f8,6,java,"1: public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)  {
2:     // rest of the code
3:     WebSettings webSettings = binding.webview.getSettings();
4:     webSettings.setJavaScriptEnabled(true);
5:     // rest of tge code
6:     binding.webview.addJavascriptInterface(new InternalJSApi(), ""InternalJSApi"");
7:     binding.webview.loadUrl(baseUrl + ""/index.html"");
8:     // rest of the code
9: }","public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)  {
    // rest of the code
    if (isJSAllowed()) {
        WebSettings webSettings = binding.webview.getSettings();
        webSettings.setJavaScriptEnabled(true);
        // rest of the code
        binding.webview.loadUrl(baseUrl + ""/index.html"");
    }
    // rest of the code

        private boolean isJSAllowed() {
        // condition
        return true;
    }
}"
6536a798e5ec0b7008c5e7f9,6,java,"1: public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)  {
2:     // rest of the code
3:     WebSettings webSettings = binding.webview.getSettings();
4:     webSettings.setJavaScriptEnabled(true);
5:     // rest of the code
6:     binding.webview.addJavascriptInterface(new InternalJSApi(), ""InternalJSApi"");
7:     binding.webview.loadUrl(baseUrl + ""/index.html"");
8:     // rest of the code
9: }","public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)  {
    // rest of the code
    if (isJSAllowed()) {
        WebSettings webSettings = binding.webview.getSettings();
        // rest of the code
        binding.webview.addJavascriptInterface(new InternalJSApi(), ""InternalJSApi"");
        binding.webview.loadUrl(baseUrl + ""/index.html"");
    }
    // rest of the code

        private boolean isJSAllowed() {
        // condition
        return true;
    }
}"
6536b0a2c922cadd14576d25,6,java,"1: // rest of the code
2: webView.getSettings().setJavaScriptEnabled(true);
3: webView.setWebChromeClient(new WebChromeClient());
4: webView.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
5: webView.addJavascriptInterface(webAppInterface, ""Android"");
6: webView.loadUrl(""file:///android_asset/map.html"");
7: // rest of the code","// rest of the code

if (isJSAllowed()) {
    webView.getSettings().setJavaScriptEnabled(true);
    webView.setWebChromeClient(new WebChromeClient());
    webView.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
    webView.addJavascriptInterface(webAppInterface, ""Android"");
    webView.loadUrl(""file:///android_asset/map.html"");
}

private boolean isJSAllowed() {
    // condition
    return true;
}

// rest of the code"
66cf49f32a2a912025aa47e6,6,java,"1: public void onClick(View v)  {
2:     DetailsViewFragment.this.getActivity().openContextMenu(v);
3: }
4: });
5: ImageButton star = (ImageButton) v.findViewById(R.id.display_star);
6: viewer = (WebView) v.findViewById(R.id.display_webview);
7: viewer.getSettings().setJavaScriptEnabled(true);
8: if (Build.VERSION.SDK_INT >= 11 && Build.VERSION.SDK_INT < 16)  {
9: viewer.setLayerType(View.LAYER_TYPE_SOFTWARE, null);
10: }
11: client = new DetailsWebViewClient(getActivity(), title, star);
12: if (savedInstanceState != null        && savedInstanceState.containsKey(""progression""))  {
13: client.setProgressToRestore(savedInstanceState          .getFloat(""progression""));
14: }
15: viewer.setWebViewClient(client);
16: viewer.getSettings().setSupportZoom(true);
17: viewer.getSettings().setBuiltInZoomControls(true);
18: if (Build.VERSION.SDK_INT >= 11)  {
19: viewer.getSettings().setDisplayZoomControls(false);
20: }
21: return v;
22: }","// rest of the code
viewer = (WebView) v.findViewById(R.id.display_webview);
if (isJSAllowed()) {
  viewer.getSettings().setJavaScriptEnabled(true);
  if (Build.VERSION.SDK_INT >= 11 && Build.VERSION.SDK_INT < 16)  {
    viewer.setLayerType(View.LAYER_TYPE_SOFTWARE, null);
  }
  client = new DetailsWebViewClient(getActivity(), title, star);
  if (savedInstanceState != null && savedInstanceState.containsKey(""progression""))  {
    client.setProgressToRestore(savedInstanceState.getFloat(""progression""));
  }
  viewer.setWebViewClient(client);
  viewer.getSettings().setSupportZoom(true);
  viewer.getSettings().setBuiltInZoomControls(true);
  if (Build.VERSION.SDK_INT >= 11)  {
    viewer.getSettings().setDisplayZoomControls(false);
  }
  // rest of the code
}

private boolean isJSAllowed() {
    // condition
    return true;
}"
653695655bce42c78626c29b,7,java,"1: public void onClick(DialogInterface dialog, int id)  {
2:     WebView webView = new WebView(getActivity());
3:     // rest of the code
4: }","public void onClick(DialogInterface dialog, int id)  {
    WebView webView = new WebView(getActivity());

    webView.setWebViewClient(new WebViewClient() {
        @Override
        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
            String url = request.getUrl().toString();
                if (isAllowed(url)) {
                //the url to be loaded with webview is ok
                return false;
            } else { return true; }     //blocking the url – overriding
        }

        private boolean isAllowed(String url) {
            Set<String> allowed_urls = new HashSet<>();
            // add elements to the set
            if (allowed_urls.contains(url)) {
                return true;
            } else { return false; }

        });
        // rest of the code       
    }
}"
65369821f0659475e25fdc96,7,java,"1: public static void openLink(Activity context, String author, String series) throws Exception  {
2:     // rest of the code
3:     try {
4:         WebView wv = new WebView(context);
5:         LinkService linkService;
6:         AssociatesAPI.initialize(new AssociatesAPI.Config(AmazonAppKey.KEY, context));
7:         linkService = AssociatesAPI.getLinkService();
8:         try  {
9:             linkService.overrideLinkInvocation(wv, url);
10:         } catch(Exception e2)  {
11:             OpenSearchPageRequest request = new OpenSearchPageRequest(""books"", author + "" "" + series);
12:             linkService.openRetailPage(request);
13:         }
14:     } catch (Exception e)  {
15:         Logger.logError(e, ""Unable to use Amazon API"");
16:         Intent loadweb = new Intent(Intent.ACTION_VIEW, Uri.parse(url + AMAZON_LINK_EXTRAS));
17:         context.startActivity(loadweb);
18:     }
19: }","public static void openLink(Activity context, String author, String series) throws Exception  {
    // rest of the code
    WebView wv = new WebView(context);
    boolean isItAlreadyHandled = true;

    wv.setWebViewClient(new WebViewClient()  {
        @Override
        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
            String url = request.getUrl().toString();
                if (isAllowed(url)) {
                //the url to be loaded with webview is ok
                return false;
            } else if (isItAlreadyHandled)  {
                try  {
                    LinkService linkService;
                    AssociatesAPI.initialize(new AssociatesAPI.Config(AmazonAppKey.KEY, context));
                    linkService = AssociatesAPI.getLinkService();
                    try  {
                        linkService.overrideLinkInvocation(wv, url);
                    } catch(Exception e2)  {
                        OpenSearchPageRequest request = new OpenSearchPageRequest(""books"", author + "" "" + series);
                        linkService.openRetailPage(request);
                    }
                } catch (Exception e)  {
                    Logger.logError(e, ""Unable to use Amazon API"");
                    Intent loadweb = new Intent(Intent.ACTION_VIEW, Uri.parse(url + AMAZON_LINK_EXTRAS));
                    context.startActivity(loadweb);
                }
            } else {
                return true;
            }
        }

        private boolean isAllowed(String url) {
            Set<String> allowed_urls = new HashSet<>();
            // add elements to the set
            if (allowed_urls.contains(url)) {
                return true;
            } else { return false; }
            }
        });
    }
}"
6536a21d39c3b332e64bd035,7,java,"1: public void onCreate(Bundle savedInstanceState)     {
2:     // rest of the code
3:     WebView webView = (WebView)findViewById(R.id.about_webview);
4:     webView.load(""file:///android_asset/about.html"");
5:     // rest of the code
6: }","public void onCreate(Bundle savedInstanceState)     {
    // rest of the code
    WebView webView = (WebView)findViewById(R.id.about_webview);
    webView.setWebViewClient(new MyWebViewClient() {
        @Override
        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
            String url = request.getUrl().toString();
                if (isAllowed(url)) {
                //the url to be loaded with webview is ok
                return false;
            } else { return true; }     //blocking the url – overriding
        }

        private boolean isAllowed(String url) {
            Set<String> allowed_urls = new HashSet<>();
            // add elements to the set
            if (allowed_urls.contains(url)) {
                return true;
            } else { return false; }

            }
        });
        webView.load(""file:///android_asset/about.html"");
        // rest of the code
    }
}"
6536a79be5ec0b7008c5e7fd,7,java,"1: public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)  {
2:     // rest of the code
3:     WebSettings webSettings = binding.webview.getSettings()
4:     // rest of the code
5:     binding.webview.loadUrl(baseUrl + ""/index.html"");
6:     // rest of the code
7: }","public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)  {
    // rest of the code
    binding.webView.setWebViewClient(new MyWebViewClient() {
        @Override
        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
            String url = request.getUrl().toString();
                if (isAllowed(url)) {
                //the url to be loaded with webview is ok
                return false;
            } else { return true; }     //blocking the url – overriding
            }

        private boolean isAllowed(String url) {
            Set<String> allowed_urls = new HashSet<>();
            // add elements to the set
            if (allowed_urls.contains(url)) {
                return true;
            } else { return false; }

            }
        });
        binding.webview.loadUrl(baseUrl + ""/index.html"");
        // rest of the code
    }
}"
6536b0a2c922cadd14576d28,7,java,"1: // rest of the code
2: webView = findViewById(R.id.webView0);
3: webView.loadUrl(""file:///android_asset/map.html"");
4: // rest of the code","webView = findViewById(R.id.webView0);
// rest of the code
webView.setWebViewClient(new MyWebViewClient() {
    @Override
    public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
        String url = request.getUrl().toString();
        if (isAllowed(url)) {
            //the url to be loaded with webview is ok
            return false;
        } else { return true; }     //blocking the url – overriding
    }

    private boolean isAllowed(String url) {
        Set<String> allowed_urls = new HashSet<>();
        // add elements to the set
        if (allowed_urls.contains(url)) {
            return true;
        } else { return false; }

    }
});
// rest of the code
webView.loadUrl(""file:///android_asset/map.html"");"
654019d7e9944987622a599e,7,java,"1: // rest of the code
2: myNewWebView = (WebView)findViewById(R.id.webview2);
3: myNewWebView.setVisibility(View.INVISIBLE);
4: // rest of the code","// rest of the code
myNewWebView = (WebView)findViewById(R.id.webview2);
myNewWebView.setVisibility(View.INVISIBLE);
myNewWebView.setWebViewClient(new MyWebViewClient() {
    @Override
    public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
        String url = request.getUrl().toString();
        if (isAllowed(url)) {
            //the url to be loaded with webview is ok
            return false;
        } else { return true; }     //blocking the url – overriding
    }

    private boolean isAllowed(String url) {
        Set<String> allowed_urls = new HashSet<>();
        // add elements to the set
        if (allowed_urls.contains(url)) {
            return true;
        } else { return false; }
    });
    // rest of the code
}"
654019d7e9944987622a599f,7,java,"1: // rest of the code
2: myWebView.setVisibility(View.VISIBLE);
3: myNewWebView.setVisibility(View.INVISIBLE);
4: myNewWebView.loadUrl(""about:blank"");
5: return;
6: // rest of the code","// rest of the code
myNewWebView.setVisibility(View.INVISIBLE);
myNewWebView.setWebViewClient(new MyWebViewClient() {
    @Override
    public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
        String url = request.getUrl().toString();
        if (isAllowed(url)) {
            //the url to be loaded with webview is ok
            return false;
        } else { return true; }     //blocking the url – overriding
    }

    private boolean isAllowed(String url) {
        Set<String> allowed_urls = new HashSet<>();
        // add elements to the set
        if (allowed_urls.contains(url)) {
            return true;
        } else { return false; }
    });
    // rest of the code
}
myNewWebView.loadUrl(""about:blank"");
return;
// rest of the code"
654019d8e9944987622a59a0,7,java,"1: // rest of the code
2: myWebView = (WebView)view;
3: // rest of the code","// rest of the code
myWebView = (WebView)view;
myWebView.setWebViewClient(new MyWebViewClient() {
    @Override
    public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
        String url = request.getUrl().toString();
        if (isAllowed(url)) {
            //the url to be loaded with webview is ok
            return false;
        } else { return true; }     //blocking the url – overriding
    }

    private boolean isAllowed(String url) {
        Set<String> allowed_urls = new HashSet<>();
        // add elements to the set
        if (allowed_urls.contains(url)) {
            return true;
        } else { return false; }
    });
    // rest of the code
}"
66c624144499dc58b599dc55,7,java,"1: protected void onCreate(Bundle savedInstanceState)  {
2:     super.onCreate(savedInstanceState);
3:     setContentView(R.layout.activity_loc_viewer);
4:     Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
5:     setSupportActionBar(toolbar);
6:     WebView myWebView = (WebView) findViewById(R.id.webview);
7:     // rest of the code
8:     myWebView.loadUrl(uri.toString());
9: }","protected void onCreate(Bundle savedInstanceState)  {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_loc_viewer);
    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
    setSupportActionBar(toolbar);
    WebView myWebView = (WebView) findViewById(R.id.webview);
    // rest of the code
    myWebView.setWebViewClient(new WebViewClient() {
        @Override
        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
            String url = request.getUrl().toString();
                if (isAllowed(url)) {
                //the url to be loaded with webview is ok
                return false;
            } else { return true; }     //blocking the url – overriding
        }

        private boolean isAllowed(String url) {
            Set<String> allowed_urls = new HashSet<>();
            // add elements to the set
            if (allowed_urls.contains(url)) {
                return true;
            } else { return false; }

        });
        // rest of the code       
    }
    myWebView.loadUrl(uri.toString());
}"
66cf3181e1f0d1586b43f0c4,7,java,"1: private void doExportHTML(boolean usePrint)  {
2:     ProgressBar progressBar = findViewById(R.id.io_progress_bar);
3:     progressBar.setVisibility(View.VISIBLE);
4:     final WebView webview = findViewById(R.id.markdown_view);
5:     final boolean use_print = usePrint;
6:     webview.getSettings().setJavaScriptEnabled(true);
7:     webview.addJavascriptInterface(new MarkdownViewJavaScriptInterface(this), ""HTMLOUT"");
8:     webview.setWebViewClient(new WebViewClient()  {
9:         @Override            public void onPageFinished(WebView view, String url)  {
10:             view.loadUrl(""javascript:window.HTMLOUT.exportHTMLJS('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>');"");
11:             if (use_print)                    createWebPrintJob(webview);
12:             ProgressBar progressBar = findViewById(R.id.io_progress_bar);
13:             progressBar.setVisibility(View.GONE);
14:         }
15:     });
16:     if ((mSafeModeTag.length() > 0) && (mMetadata.contains(mSafeModeTag)))                webview.loadDataWithBaseURL(Const.PREFIX_FILE + mLocalRepoPath + ""/"", mContent.getText().toString(), ""text/html"", ""utf-8"", null);
17:     else            webview.loadDataWithBaseURL(Const.PREFIX_FILE + mLocalRepoPath + ""/"", buildSource(false), ""text/html"", ""utf-8"", null);
18:     // rest of the code","private void doExportHTML(boolean usePrint)  {
    ProgressBar progressBar = findViewById(R.id.io_progress_bar);
    progressBar.setVisibility(View.VISIBLE);
    final WebView webview = findViewById(R.id.markdown_view);
    final boolean use_print = usePrint;
    webview.getSettings().setJavaScriptEnabled(true);
    webview.addJavascriptInterface(new MarkdownViewJavaScriptInterface(this), ""HTMLOUT"");
    webview.setWebViewClient(new WebViewClient()  {
        @Override
            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                String url = request.getUrl().toString();
                        if (isAllowed(url)) {
                    //the url to be loaded with webview is ok
                    return false;
                } else { return true; }     //blocking the url – overriding
            }

                private boolean isAllowed(String url) {
                Set<String> allowed_urls = new HashSet<>();
                // add elements to the set
                if (allowed_urls.contains(url)) {
                    return true;
                } else { return false; }

            }
            // rest of the code       
        @Override
        public void onPageFinished(WebView view, String url)  {
            view.loadUrl(""javascript:window.HTMLOUT.exportHTMLJS('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>');"");
            if (use_print)                    createWebPrintJob(webview);
            ProgressBar progressBar = findViewById(R.id.io_progress_bar);
            progressBar.setVisibility(View.GONE);
        }
      });
    if ((mSafeModeTag.length() > 0) && (mMetadata.contains(mSafeModeTag)))
        webview.loadDataWithBaseURL(Const.PREFIX_FILE + mLocalRepoPath + ""/"", mContent.getText().toString(), ""text/html"", ""utf-8"", null);
    else
        webview.loadDataWithBaseURL(Const.PREFIX_FILE + mLocalRepoPath + ""/"", buildSource(false), ""text/html"", ""utf-8"", null);
    // rest of the code
}"
66cf377e608fcf23a8931277,7,java,"1: public void onActivityCreated(Bundle savedInstanceState)  {
2:     super.onActivityCreated(savedInstanceState);
3:     WebView webView = getActivity().findViewById(R.id.about_thirdsparty_credits);
4:     WebSettings settings = webView.getSettings();
5:     settings.setDefaultTextEncodingName(""utf-8"");
6:     webView.loadData(MmxFileUtils.getRawAsString(getActivity().getApplicationContext(), credits_thirdparty),                ""text/html; charset=utf-8"", null);
7: }","public void onActivityCreated(Bundle savedInstanceState)  {
    super.onActivityCreated(savedInstanceState);
    WebView webView = getActivity().findViewById(R.id.about_thirdsparty_credits);
    WebSettings settings = webView.getSettings();
    settings.setDefaultTextEncodingName(""utf-8"");
    webView.setWebViewClient(new WebViewClient() {
        @Override
        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
            String url = request.getUrl().toString();
                if (isAllowed(url)) {
                //the url to be loaded with webview is ok
                return false;
            } else { return true; }     //blocking the url – overriding
        }

        private boolean isAllowed(String url) {
            Set<String> allowed_urls = new HashSet<>();
            // add elements to the set
            if (allowed_urls.contains(url)) {
                return true;
            } else { return false; }

        });
        // rest of the code       
    }
    webView.loadData(MmxFileUtils.getRawAsString(getActivity().getApplicationContext(), credits_thirdparty), ""text/html; charset=utf-8"", null);
}"
66cf377f608fcf23a8931278,7,java,"1: private void loadChangelog(View view)  {
2:     NetworkUtils utils = new NetworkUtils(getActivity());
3:     if (!utils.isOnline())  {
4:         new Core(getActivity()).alert(R.string.no_network);
5:         return;
6:     }
7:     String url = ""https://github.com/moneymanagerex/android-money-manager-ex/releases"";
8:     WebView webView = view.findViewById(R.id.webView);
9:     if (webView != null)  {
10:         webView.loadUrl(url);
11:     }
12: }","private void loadChangelog(View view)  {
    NetworkUtils utils = new NetworkUtils(getActivity());
    if (!utils.isOnline())  {
        new Core(getActivity()).alert(R.string.no_network);
        return;
    }
    String url = ""https://github.com/moneymanagerex/android-money-manager-ex/releases"";
    WebView webView = view.findViewById(R.id.webView);
    if (webView != null)  {
        webView.setWebViewClient(new WebViewClient() {
          @Override
          public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
              String url = request.getUrl().toString();
                    if (isAllowed(url)) {
                  //the url to be loaded with webview is ok
                  return false;
              } else { return true; }     //blocking the url – overriding
          }

            private boolean isAllowed(String url) {
              Set<String> allowed_urls = new HashSet<>();
              // add elements to the set
              if (allowed_urls.contains(url)) {
                  return true;
              } else { return false; }

          });      
    }
        webView.loadUrl(url);
    }
}"
6536b2b18894263da8016cd2,9,java,"1: public void onFileSelected(File file, boolean checked)  {
2:     Intent intent = new Intent();
3:     intent.setData(Uri.fromFile(file));
4:     fragment.onActivityResult(requestCode, Activity.RESULT_OK, intent);
5: }, fragment.getActivity().getSupportFragmentManager(), title, message, defaultFile, checkMsg);","public void onFileSelected(File file, boolean checked)  {
    Intent intent = new Intent();
    
    Uri contentUri = FileProvider.getUriForFile(this, ""file_provider"", file);
    Uri parse = Uri.parse(contentUri);
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
    intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
    intent.setData(parse);
    fragment.onActivityResult(requestCode, Activity.RESULT_OK, intent);
}"
66c62575c20fb5508703cac7,11,java,"1: public static File getTempFileWithProgress(String path, String filename, DxApplication app, RecoverySystem.ProgressListener progressListener) {
2:     try {
3:         byte[] sha1b = app.getSha256();
4:         File f = new File(app.getFilesDir(),path);
5:         if(!f.exists()) {
6:             return null;
7:         }
8:         String suffix = "".""+filename.split(""\\."")[filename.split(""\\."").length-1];
9:         if(new File(app.getExternalCacheDir(),filename).exists()) {
10:             return new File(app.getExternalCacheDir(),filename);
11:         }
12:         cleanDir(Objects.requireNonNull(app.getExternalCacheDir()));
13:         cleanDir(Objects.requireNonNull(app.getCacheDir()));
14:         File tmp = File.createTempFile(filename.replace(suffix,""""),suffix,app.getExternalCacheDir());
15:         // rest of the code
16:     }catch (Exception e) {
17:         e.printStackTrace();
18:         progressListener.onProgress(100);
19:     }
20:     // rest of the code
21: }","public static File getTempFileWithProgress(String path, String filename, DxApplication app, RecoverySystem.ProgressListener progressListener) {
    long max_size = 1024L * 1024L;
    try {
        byte[] sha1b = app.getSha256();
        File f = new File(app.getFilesDir(),path);
        if(!f.exists()) {
            return null;
        }
        File cacheDir = app.getCacheDir();
        long cacheDirSize = app.getCacheDir().getTotalSpace();
        if (cacheDirSize > max_size) {
            cacheDir = app.getExternalCacheDir();
        }
        
        String suffix = "".""+filename.split(""\\."")[filename.split(""\\."").length-1];
        if(new File(cacheDir).exists()) {
            return new File(cacheDir);
        }
        cleanDir(Objects.requireNonNull(cacheDir);
        cleanDir(Objects.requireNonNull(cacheDir);
        File tmp = File.createTempFile(filename.replace(suffix,""""),suffix,cacheDir);
        // rest of the code
    }catch (Exception e) {
        e.printStackTrace();
        progressListener.onProgress(100);
    }
    // rest of the code
}"
66cf3a296fcf9cbbb9cea067,11,java,"1: // rest of the code
2: if (sharedText != null) {
3:     var file = new File(getExternalCacheDir(), ""newfile.txt"");
4:     newEditor(DocumentFile.fromFile(file), true, sharedText);
5:     new After(150, () -> {
6:         MainActivity.this.runOnUiThread(this::onNewEditor);
7:     });
8: }
9: // rest of the code","// rest of the code
long max_size = 1024L * 1024L;
if (sharedText != null) {
    1
    File cacheDir = app.getCacheDir();
    long cacheDirSize = app.getCacheDir().getTotalSpace();
    if (cacheDirSize > max_size) {
        cacheDir = app.getExternalCacheDir();
    } 
    var file = new File(cacheDir, ""newfile.txt"");
    newEditor(DocumentFile.fromFile(file), true, sharedText);
    new After(150, () -> {
        MainActivity.this.runOnUiThread(this::onNewEditor);
    });
}
// rest of the code"
66cf3eaa26dd511a37eb1118,11,java,"1: public static File getFileForUri(Context context, Uri uri) {
2:     List<String> pathFragments = uri.getPathSegments();
3:     String tag=pathFragments.get(0);
4:     StringBuilder fileStringBuilder = new StringBuilder();
5:     for (int i=1; i < pathFragments.size(); i++) {
6:         fileStringBuilder.append(pathFragments.get(i));
7:         if (i< pathFragments.size()-1) {
8:             fileStringBuilder.append(""/"");
9:         }
10:     }
11:     String file = fileStringBuilder.toString();
12:     File path = null;
13:     if (tag.equals(TAG_FILES)) {
14:         path = context.getFilesDir();
15:     }
16:     if (tag.equals(TAG_FILES_EXTERNAL)) {
17:         path = context.getExternalFilesDir(null);
18:     }
19:     if (tag.equals(TAG_CACHE)) {
20:         path = context.getCacheDir();
21:     }
22:     if (tag.equals(TAG_CACHE_EXTERNAL)) {
23:         path = context.getExternalCacheDir();
24:     }
25:     if (path==null) {
26:         return new File(String.valueOf(uri));
27:     }
28:     return new File(path, file);","public static File getFileForUri(Context context, Uri uri) {
    List<String> pathFragments = uri.getPathSegments();
    String tag=pathFragments.get(0);
    StringBuilder fileStringBuilder = new StringBuilder();
    for (int i=1; i < pathFragments.size(); i++) {
        fileStringBuilder.append(pathFragments.get(i));
        if (i< pathFragments.size()-1) {
            fileStringBuilder.append(""/"");
        }
    }
    String file = fileStringBuilder.toString();
    File path = null;
    if (tag.equals(TAG_FILES)) {
        path = context.getFilesDir();
    }
    if (tag.equals(TAG_FILES_EXTERNAL)) {
        path = context.getExternalFilesDir(null);
    }
    1
    long max_size = 1024L * 1024L;
    File cacheDir = app.getCacheDir();
    long cacheDirSize = app.getCacheDir().getTotalSpace();
        
    if (cacheDirSize > max_size) {
        path = context.getExternalCacheDir();
    }     
    if (path==null) {
        return new File(String.valueOf(uri));
    }
    return new File(path, file);
  }"
66cf499a9838e95cdc5244bd,11,java,"1: private static boolean setDolphinUserDirectory(Context context)   {
2:     File path = DirectoryInitialization.getUserDirectoryPath(context);
3:     if (path == null)      return false;
4:     userPath = path.getAbsolutePath();
5:     Log.debug(""[DirectoryInitialization] User Dir: "" + userPath);
6:     NativeLibrary.SetUserDirectory(userPath);
7:     File cacheDir = context.getExternalCacheDir();
8:     if (cacheDir == null)     {
9:         cacheDir = context.getCacheDir();
10:         if (cacheDir == null)        return false;
11:     }
12:     Log.debug(""[DirectoryInitialization] Cache Dir: "" + cacheDir.getPath());
13:     NativeLibrary.SetCacheDirectory(cacheDir.getPath());
14:     return true;","private static boolean setDolphinUserDirectory(Context context, File fileToCache)   {
    File path = DirectoryInitialization.getUserDirectoryPath(context);
    if (path == null)      return false;
    userPath = path.getAbsolutePath();
    Log.debug(""[DirectoryInitialization] User Dir: "" + userPath);
    NativeLibrary.SetUserDirectory(userPath);
    1
    long max_size = 1024L * 1024L;
    File cacheDir;
    File cacheDir = app.getCacheDir();
    long cacheDirSize = app.getCacheDir().getTotalSpace();
    if (cacheDirSize > max_size) {
        cacheDir = app.getExternalCacheDir();
    }
    Log.debug(""[DirectoryInitialization] Cache Dir: "" + cacheDir.getPath());
    NativeLibrary.SetCacheDirectory(cacheDir.getPath());
    return true;
}"
66c624bb6532a14756d07bb2,14,java,"1: public static long cleanupFilesTotalSize() {
2:     if (!StorageUtils.sdCardWritable()) return 0;
3:     long totalSize = 0;
4:     File dir = new File(StorageUtils.EXTERNAL_FILE_PATH);
5:     for (String name : dir.list()) {
6:         boolean purge = false;
7:         for (String prefix : mPurgeableFilePrefixes) {
8:             if (name.startsWith(prefix)) {
9:                 purge = true;
10:                 break;
11:             }
12:         }
13:         if (purge) {
14:             try {
15:                 File file = new File(StorageUtils.EXTERNAL_FILE_PATH + ""/"" + name);
16:                 totalSize += file.length();
17:             } catch (Exception e) {
18:             }
19:         }
20:     }
21:     return totalSize;
22: }","public static String getIntegrityHash(String filePath) throws IOException, NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-256""); 
        byte[] buffer = new byte[8192];
        int bytesRead;

        try (BufferedInputStream fis = new BufferedInputStream(new FileInputStream(filePath))) {
            while ((bytesRead = fis.read(buffer)) != -1) {
                md.update(buffer, 0, bytesRead);
            }
        }

        byte[] digest = md.digest();
        return bytesToHex(digest);
    }

    private static String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format(""%02x"", b));
        }
        return sb.toString();
    }

    public static boolean verifyIntegrity(String filePath, String expectedHash) throws IOException, NoSuchAlgorithmException {
        String actualHash = getIntegrityHash(filePath);
        return actualHash.equals(expectedHash);
    }

public static long cleanupFilesTotalSize() {
    4
    String expectedchecksum = """"; // securely loaded
    if (!StorageUtils.sdCardWritable()) return 0;
    long totalSize = 0;
    File dir = new File(StorageUtils.EXTERNAL_FILE_PATH);
    if (verifyIntegrity(dir.getAbsolutePath(), expectedchecksum)) {
      for (String name : dir.list()) {
          boolean purge = false;
          for (String prefix : mPurgeableFilePrefixes) {
              if (name.startsWith(prefix)) {
                  purge = true;
                  break;
              }
          }
          if (purge) {
              try {
                  File file = new File(StorageUtils.EXTERNAL_FILE_PATH + ""/"" + name);
                  totalSize += file.length();
              } catch (Exception e) {
              }
          }
      }
      return totalSize;
    } else { return -1; }
}"
66c6270ddf7bbe9b1bc0c403,14,java,"1: private String read(Context context, String fileName)  {
2:     try  {
3:         ContextWrapper cw = new ContextWrapper(context);
4:         File directory = cw.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS);
5:         File importfile = new File(directory, fileName);
6:         // rest of the code
7:     } catch (FileNotFoundException fileNotFound)  {
8:         return null;
9:     } catch (IOException ioException)  {
10:         return null;
11:     }
12: }","public static String getIntegrityHash(String filePath) throws IOException, NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-256""); 
        byte[] buffer = new byte[8192];
        int bytesRead;

        try (BufferedInputStream fis = new BufferedInputStream(new FileInputStream(filePath))) {
            while ((bytesRead = fis.read(buffer)) != -1) {
                md.update(buffer, 0, bytesRead);
            }
        }

        byte[] digest = md.digest();
        return bytesToHex(digest);
    }

    private static String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format(""%02x"", b));
        }
        return sb.toString();
    }

    public static boolean verifyIntegrity(String filePath, String expectedHash) throws IOException, NoSuchAlgorithmException {
        String actualHash = getIntegrityHash(filePath);
        return actualHash.equals(expectedHash);
    }

private String read(Context context, String fileName)  {
    String expectedchecksum = """"; // securely loaded
    try  {
        ContextWrapper cw = new ContextWrapper(context);
        File directory = cw.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS);
        File importfile = new File(directory, fileName);
        4
        if (verifyIntegrity(importfile.getAbsolutePath(), expectedchecksum)) {
            // rest of the code
        }
    } catch (FileNotFoundException fileNotFound)  {
        return null;
    } catch (IOException ioException)  {
        return null;
    }
}"
66c7bd6f03699788ec20dd14,14,java,"1: public void export_db()  {
2:     close();
3:     File cur_db = ctx.getDatabasePath(DATABASE_NAME);
4:     File sd = Environment.getExternalStorageDirectory();
5:     FileChannel source=null;
6:     FileChannel destination=null;
7:     File export_file = new File(sd, DATABASE_EXPORT);
8:     try  {
9:         source = new FileInputStream(cur_db).getChannel();
10:         destination = new FileOutputStream(export_file).getChannel();
11:         destination.transferFrom(source, 0, source.size());
12:         source.close();
13:         destination.close();
14:         Toast.makeText(ctx, ""Exported"", Toast.LENGTH_LONG).show();
15:     } catch(IOException e)  {
16:         e.printStackTrace();
17:     }
18: }","public static String getIntegrityHash(String filePath) throws IOException, NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-256""); 
        byte[] buffer = new byte[8192];
        int bytesRead;

        try (BufferedInputStream fis = new BufferedInputStream(new FileInputStream(filePath))) {
            while ((bytesRead = fis.read(buffer)) != -1) {
                md.update(buffer, 0, bytesRead);
            }
        }

        byte[] digest = md.digest();
        return bytesToHex(digest);
    }

    private static String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format(""%02x"", b));
        }
        return sb.toString();
    }

    public static boolean verifyIntegrity(String filePath, String expectedHash) throws IOException, NoSuchAlgorithmException {
        String actualHash = getIntegrityHash(filePath);
        return actualHash.equals(expectedHash);
    }

public void export_db()     {
    String expectedchecksum = """"; // securely loaded
    close();
    File cur_db = ctx.getDatabasePath(DATABASE_NAME);
    File sd = Environment.getExternalStorageDirectory();
    FileChannel source=null;
    FileChannel destination=null;
    File export_file = new File(sd, DATABASE_EXPORT);
    4
    if (verifyIntegrity(export_file.getAbsolutePath(), expectedchecksum)) {
      try  {
          source = new FileInputStream(cur_db).getChannel();
          destination = new FileOutputStream(export_file).getChannel();
          destination.transferFrom(source, 0, source.size());
          source.close();
          destination.close();
          Toast.makeText(ctx, ""Exported"", Toast.LENGTH_LONG).show();
      } catch(IOException e)  {
          e.printStackTrace();
      }
    }
   
}"
654018db51ee9c74085f0832,15,xml,"1: android:name=""${applicationId}.READ_CARDS""
2: android:protectionLevel=""dangerous"" />","<permission android:description=""@string/permissionReadCardsDescription""
android:protectionLevel=""signature""  />"
66c7c6634f8c1d89a6c7c93c,15,xml,"1: <permission android:name=""${applicationId}.WRITE_TEMPORARY_STORAGE""/>","<permission android:name=""${applicationId}.WRITE_TEMPORARY_STORAGE"" android:protectionLevel=""signature""  />"
66cf304b356077772564790f,15,xml,"1: <permission
2:     android:name=""${applicationId}.permission.READ""
3:     android:description=""@string/app_permission_desc""
4:     android:label=""@string/app_name""
5:     android:permissionGroup=""${applicationId}.permission-group""
6:     android:protectionLevel=""dangerous"" />","<permission
    android:name=""${applicationId}.permission.READ""
    android:description=""@string/app_permission_desc""
    android:label=""@string/app_name""
    android:permissionGroup=""${applicationId}.permission-group""
    android:protectionLevel=""signature""  />"
66cf3c3576eefca9545d6ddd,15,xml,"1: <permission
2:     android:name=""${TERMUX_PACKAGE_NAME}.permission.RUN_COMMAND""
3:     android:description=""@string/permission_run_command_description""
4:     android:icon=""@mipmap/ic_launcher""
5:     android:label=""@string/permission_run_command_label""
6:     android:protectionLevel=""dangerous"" />","<permission
    android:name=""${TERMUX_PACKAGE_NAME}.permission.RUN_COMMAND""
    android:description=""@string/permission_run_command_description""
    android:icon=""@mipmap/ic_launcher""
    android:label=""@string/permission_run_command_label""
    android:protectionLevel=""signature""  />"
66cf507d954fea309c29310c,15,xml,"1: <permission
2:     android:description=""@string/permission_read_tasks""
3:     android:label=""@string/read_permission_label""
4:     android:name=""${applicationId}.permission.READ_TASKS""
5:     android:permissionGroup=""${applicationId}.permission-group""
6:     android:protectionLevel=""dangerous""/>","<permission
    android:description=""@string/permission_read_tasks""
    android:label=""@string/read_permission_label""
    android:name=""${applicationId}.permission.READ_TASKS""
    android:permissionGroup=""${applicationId}.permission-group""
    android:protectionLevel=""signature""  />"
66cf5086954fea309c29310d,15,xml,"1: <permission
2:     android:description=""@string/permission_read_tasks""
3:     android:label=""@string/read_permission_label""
4:     android:name=""${applicationId}.permission.WRITE_TASKS""
5:     android:permissionGroup=""${applicationId}.permission-group""
6:     android:protectionLevel=""dangerous""/>","<permission
    android:description=""@string/permission_read_tasks""
    android:label=""@string/read_permission_label""
    android:name=""${applicationId}.permission.WRITE_TASKS""
    android:permissionGroup=""${applicationId}.permission-group""
    android:protectionLevel=""signature""  />"
6536982cf0659475e25fdca2,16,java,"1: public static void openLink(Activity context, String author, String series) throws Exception  {
2:     // rest of the code
3:     WebView wv = new WebView(context);
4:     // rest of the code
5: }","public static void openLink(Activity context, String author, String series) throws Exception  {
    // rest of the code
    WebView wv = new WebView(context);
    // rest of the code
    wv.clearCache(true);
}"
6536a21e39c3b332e64bd03f,16,java,"1: public void onCreate(Bundle savedInstanceState)     {
2:     // rest of the code
3:     WebView webView = (WebView)findViewById(R.id.about_webview);
4:     // rest of the code
5: }","public void onCreate(Bundle savedInstanceState)     {
    // rest of the code
    WebView webView = (WebView)findViewById(R.id.about_webview);
    // rest of the code
    webView.clearCache(true);
}"
6536a7cbe5ec0b7008c5e810,16,java,"1: public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)  {
2:     // rest of the code
3:     binding.webview.loadUrl(baseUrl + ""/index.html"");
4:     // rest of the code
5: }","public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, WebChromeClient.FileChooserParams fileChooserParams)  {
    // rest of the code
    binding.webview.loadUrl(baseUrl + ""/index.html"");
    binding.webview.clearCache(true);
    // rest of the code
}"
6536b0a8c922cadd14576d33,16,java,"1: // rest of the code
2: webView = findViewById(R.id.webView0);
3: // rest of the code","webView = findViewById(R.id.webView0);
// rest of the code
webView.clearCache(true);"
654012a6ea47246b0d67a32e,16,java,"1: protected void onCreate(Bundle savedInstanceState)  {
2:     // rest of the code
3:     chatWebView = findViewById(R.id.chatWebView);
4:     // rest of the code
5: }","protected void onCreate(Bundle savedInstanceState)  {
    // rest of the code
    chatWebView = findViewById(R.id.chatWebView);
    // rest of the code

    
    chatWebView.clearCache(true);
}"
654019e1e9944987622a59ad,16,java,"1: // rest of the code
2: myNewWebView.setVisibility(View.VISIBLE);
3: myNewWebView.setVisibility(View.INVISIBLE);
4: myNewWebView.loadUrl(""about:blank"");
5: return;
6: // rest of the code","// rest of the code
myWebView.setVisibility(View.VISIBLE);
myNewWebView.setVisibility(View.INVISIBLE);
myNewWebView.loadUrl(""about:blank"");
myNewWebView.clearCache(true);
return;
// rest of the code"
66cf379b608fcf23a8931285,16,java,"1: public Dialog onCreateDialog(Bundle savedInstanceState)  {
2:     View view = ((LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.dialog_tips, null);
3:     TextView textTips = view.findViewById(R.id.textViewTips);
4:     textTips.setText(getTips());
5:     textTips.setVisibility(!isViewAsWeb() ? View.VISIBLE : View.GONE);
6:     WebView webView = view.findViewById(R.id.webViewTips);
7:     webView.setVisibility(isViewAsWeb() ? View.VISIBLE : View.GONE);
8:     if (getRawWeb() != 0)  {
9:         webView.loadData(MmxFileUtils.getRawAsString(getActivity(), getRawWeb()), ""text/html"", ""UTF-8"");
10:     }
11:     // rest of the code
12: }","public Dialog onCreateDialog(Bundle savedInstanceState)  {
    View view = ((LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE)).inflate(R.layout.dialog_tips, null);
    TextView textTips = view.findViewById(R.id.textViewTips);
    textTips.setText(getTips());
    textTips.setVisibility(!isViewAsWeb() ? View.VISIBLE : View.GONE);
    WebView webView = view.findViewById(R.id.webViewTips);
    webView.setVisibility(isViewAsWeb() ? View.VISIBLE : View.GONE);
    if (getRawWeb() != 0)  {
        webView.loadData(MmxFileUtils.getRawAsString(getActivity(), getRawWeb()), ""text/html"", ""UTF-8"");
    }
    // rest of the code
    webView.clearCache(true);
}"
6549183040d776dd91444220,17,java,"1: public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)  {
2:     // rest of the code
3:     case ALARM_ID:
4:     alarmid = ContentUris.parseId(uri);
5:     c = db.query(AlarmEntry.TABLE_NAME, projection,AlarmEntry._ID + "" == "" + alarmid, null, null, null, null);
6:     c.setNotificationUri(getContext().getContentResolver(), uri);
7:     return c;
8:     // rest of the code
9: }","public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)  {
    // rest of the code
    case ALARM_ID:
        alarmid = ContentUris.parseId(uri);
        String selection = AlarmEntry._ID + "" = ? "";
        String[] args = new String[] {String.valueOf(alarmid)};
        c = db.query(AlarmEntry.TABLE_NAME, projection, selection, args, null, null, null);
        c.setNotificationUri(getContext().getContentResolver(), uri);
        return c;
        // rest of the code
}"
6549183040d776dd91444221,17,java,"1: public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)  {
2:     // rest of the code
3:     case SETTINGS_ID:
4:     alarmid = ContentUris.parseId(uri);
5:     c = db.query(SettingsEntry.TABLE_NAME, projection, SettingsEntry.ALARM_ID + "" == "" + alarmid,
6:     // rest of the code
7: }","public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)  {
    // rest of the code
    case SETTINGS_ID:
        alarmid = ContentUris.parseId(uri);
        String selection = SettingsEntry.ALARM_ID + "" = ? "";
        String[] args = new String[] {String.valueOf(alarmid)};
        c = db.query(SettingsEntry.TABLE_NAME, projection, selection, args, null, null, null);
        // rest of the code
}"
6549183040d776dd91444222,17,java,"1: // rest of the code
2: case ALARM_ID:
3: alarmid = ContentUris.parseId(uri);
4: count = db.update( AlarmEntry.TABLE_NAME, values, AlarmEntry._ID + "" == "" + alarmid, null);
5: // rest of the code","// rest of the code
case ALARM_ID:
    alarmid = ContentUris.parseId(uri);
    String selection = AlarmEntry._ID + "" = ? "";
    String[] args = new String[] {String.valueOf(alarmid)};
    count = db.update(AlarmEntry.TABLE_NAME, values, selection, args);
    // rest of the code"
6549183040d776dd91444223,17,java,"1: // rest of the code
2: case SETTINGS_ID:
3: alarmid = ContentUris.parseId(uri);
4: count = db.update( SettingsEntry.TABLE_NAME, values, SettingsEntry.ALARM_ID + "" == "" + alarmid, null);
5: // rest of the code","// rest of the code
case SETTINGS_ID:
    alarmid = ContentUris.parseId(uri);
    String selection = SettingsEntry.ALARM_ID + "" = ? "";
    String[] args = new String[] {String.valueOf(alarmid)};
    count = db.update(SettingsEntry.TABLE_NAME, values, selection, args);
    // rest of the code"
6549183140d776dd91444224,17,java,"1: // rest of the code
2: if (count > 0) {
3:     getContext().getContentResolver().notifyChange(uri, null);
4:     count += db.delete(SettingsEntry.TABLE_NAME,SettingsEntry.ALARM_ID + "" == "" + alarmid, null);
5: }
6: return count;
7: // rest of the code","// rest of the code
if (count > 0) {
    getContext().getContentResolver().notifyChange(uri, null);
	String selection = SettingsEntry.ALARM_ID + "" = ?"";
	String[] args = new String[] {String.valueOf(alarmid)};
    count += db.delete(SettingsEntry.TABLE_NAME, selection, args);
}
return count;
// rest of the code"
6549183140d776dd91444225,17,java,"1: // rest of the code
2: case SETTINGS_ID:
3: alarmid = ContentUris.parseId(uri);
4: count = db.delete(SettingsEntry.TABLE_NAME,SettingsEntry.ALARM_ID + "" == "" + alarmid, null);
5: if (count > 0)
6: getContext().getContentResolver().notifyChange(uri, null);
7: return count;
8: // rest of the code","// rest of the code
case SETTINGS_ID:
    alarmid = ContentUris.parseId(uri);
    String selection = SettingsEntry.ALARM_ID + "" = ?"";
    String[] args = new String[] {String.valueOf(alarmid)};
    count = db.delete(SettingsEntry.TABLE_NAME, selection, args);
    if (count > 0)
        getContext().getContentResolver().notifyChange(uri, null);
    return count;
    // rest of the code"
65491c143b8e38853fa7e206,17,java,"1: public int delete(Uri uri, String selection, String[] selectionArgs)  {
2:     // rest of the code
3:     String id = uri.getPathSegments().get(1);
4:     count = db.delete(DATABASE_DELIVERY_ENTRY_TABLE, KEY_DELIVERY_ENTRY_ROWID + ""="" + id + (!TextUtils.isEmpty(selection) ? "" AND ("" + selection + ')' : """"), selectionArgs);
5:     // rest of the code
6: }","public int delete(Uri uri, String selection, String[] selectionArgs)  {
    // rest of the code
    String id = uri.getPathSegments().get(1);
    String sql = ""DELETE FROM "" + DATABASE_DELIVERY_ENTRY_TABLE + "" WHERE "" + KEY_DELIVERY_ENTRY_ROWID + "" = ? AND ( ? )"";
    try (PreparedStatement stmt = db.prepareStatement(sql)) {
        stmt.setString(1, id);
        if (!TextUtils.isEmpty(selection)) {
            stmt.setString(2, selection);
        }
        count = stmt.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
        count = 0;
    }
    // rest of the code
}"
65491c143b8e38853fa7e207,17,java,"1: public int delete(Uri uri, String selection, String[] selectionArgs)  {
2:     // rest of the code
3:     case MESSAGES_ID:  {
4:         String id = uri.getPathSegments().get(1);
5:         count = db.delete(DATABASE_DELIVERY_ENTRY_TABLE, KEY_MESSAGE_ROWID + ""="" + id + (!TextUtils.isEmpty(selection) ? "" AND ("" + selection + ')' : """"), selectionArgs);
6:         break;
7:     }
8:     // rest of the code
9: }","public int delete(Uri uri, String selection, String[] selectionArgs) {
    String id = uri.getPathSegments().get(1);
    String sql = ""DELETE FROM "" + DATABASE_DELIVERY_ENTRY_TABLE + "" WHERE "" + KEY_MESSAGE_ROWID + "" = ?"";
    if (!TextUtils.isEmpty(selection)) {
        sql += "" AND ("" + selection + "")"";
    }
    try (PreparedStatement stmt = db.prepareStatement(sql)) {
        stmt.setString(1, id);
        if (selectionArgs != null) {
            for (int i = 0; i < selectionArgs.length; i++) {
                stmt.setString(i + 2, selectionArgs[i]); 
            }
        }
        count = stmt.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
        count = 0;
    }

    return count;
}"
66cf37a0608fcf23a893128c,17,java,"1: public String prepareQuery(String query, String[] projection, String selection, String sortOrder)  {
2:     String selectList, from, where = """", sort = """";
3:     if (projection == null)  {
4:         selectList = ""SELECT *"";
5:     } else  {
6:         selectList = ""SELECT "";
7:         for (int i = 0; i < projection.length; i++)  {
8:             if (i > 0)  {
9:                 selectList += "", "";
10:             }
11:             selectList += projection[i];
12:         }
13:     }
14:     from = ""FROM ("" + query + "") T"";
15:     if (!TextUtils.isEmpty(selection))  {
16:         if (!selection.startsWith(""WHERE""))  {
17:             where += ""WHERE"";
18:         }
19:         where += "" "" + selection;
20:     }
21:     if (!TextUtils.isEmpty(sortOrder))  {
22:         if (!sortOrder.contains(""ORDER BY""))  {
23:             sort += ""ORDER BY "";
24:         }
25:         sort += "" "" + sortOrder;
26:     }
27:     query = selectList + "" "" + from;
28:     if (!TextUtils.isEmpty(where))  {
29:         query += "" "" + where;
30:     }
31:     if (!TextUtils.isEmpty(sort))  {
32:         query += "" "" + sort;
33:     }
34:     return query;","public PreparedStatement prepareQuery(String query, String[] projection, String selection, String[] selectionArgs, String sortOrder)  {
    String selectList, from, where = """", sort = """";

    if (projection == null)  {
        selectList = ""SELECT *"";
    } else  {
        selectList = ""SELECT "";
        for (int i = 0; i < projection.length; i++)  {
            if (i > 0)  {
                selectList += "", "";
            }
            if (isValid(projection[i])) selectList += projection[i];
            else throw new IllegalArgumentException();
        }
    }

    from = ""FROM ("" + query + "") T"";
    if (!TextUtils.isEmpty(selection))  {
        if (!selection.startsWith(""WHERE""))  {
            where += ""WHERE"";
        }
        where += selection;
    }
    if (!TextUtils.isEmpty(sortOrder))  {
        if (!sortOrder.contains(""ORDER BY""))  {
            sort += ""ORDER BY "";
        }
        sort += "" ? "";
    }
    query = selectList + "" "" + from;
    if (!TextUtils.isEmpty(where))  {
        query += "" "" + where;
    }
    if (!TextUtils.isEmpty(sort))  {
        query += "" "" + sort;
    }

    String finalQuery = selectList + "" "" + from + where + orderBy;
   
    PreparedStatement ps = conn.prepareStatement(finalQuery);

    int index = 1;
    if (selectionArgs != null) {
        for (String arg : selectionArgs) {
            ps.setString(index++, arg);
        }
    }
    return ps;
}

private boolean isValid(String projection) {
    // write the method to validate
    return false;
}"
65369502ff657e2ee176cb2f,18,java,"1: // rest of the code
2: Intent goToMarket = new Intent(Intent.ACTION_VIEW).setData(Uri.parse(""market://details?id=""+packageName));
3: startActivity(goToMarket);
4: // rest of the code","// rest of the code

Intent goToMarket = new Intent(this, target_class.class);
goToMarket.setAction(Intent.ACTION_VIEW);
goToMarket.setData(Uri.parse(""market://details?id=""+packageName));
startActivity(goToMarket);
// rest of the code"
6536952ba598bba2731541e0,18,java,"1: public void Locationbtn()  {
2:     // rest of the code new String(buff).trim();
3:     Intent i = new Intent(Intent.ACTION_VIEW);
4:     i.setData(Uri.parse(st));
5:     startActivity(i);
6:     // rest of the code
7: }","public void Locationbtn()  {
    // rest of the code new String(buff).trim();
    
    Intent i = new Intent(this, target_class.class);
    i.setAction(Intent.ACTION_VIEW);
    i.setData(Uri.parse(st));
    startActivity(i);
    // rest of the code
}"
65369539184a4c03d38f9514,18,java,"1: // rest of the code
2: Intent intent = new Intent();
3: intent.setAction(Intent.ACTION_VIEW);
4: if ( mPrefs.addLineNumber ) {
5:     intent.setDataAndType(Uri.parse(""file://"" + mPath + ""?line="" + (1+position) ), ""text/plain"");
6: } else {
7:     intent.setDataAndType(Uri.parse(""file://"" + mPath), ""text/plain"");
8: }
9: startActivity(intent);
10: return true;","// rest of the code

Intent intent = new Intent(this, target_class.class);
intent.setAction(Intent.ACTION_VIEW);
if ( mPrefs.addLineNumber ) {
    intent.setDataAndType(Uri.parse(""file://"" + mPath + ""?line="" + (1+position) ), ""text/plain"");
}else {
    intent.setDataAndType(Uri.parse(""file://"" + mPath), ""text/plain"");
}
startActivity(intent);
return true;"
653696f4c84a4edf2e2518ea,18,java,"1: // rest of the code
2: Intent intent = new Intent(""app_package.LOOKUP"");
3: intent.putExtra(""HEADWORD"", lookupWord);
4: try  {
5:     mActivity.startActivity(intent);
6: } catch(Exception e)  {
7:     AMGUIUtility.displayException(mActivity, mActivity.getString(R.string.error_text), mActivity.getString(R.string.dict_fora) + "" "" + mActivity.getString(R.string.error_no_dict), e);
8: }
9: // rest of the code","// rest of the code

Intent intent = new Intent(this, target_class.class);
intent.setAction(""name.action.LOOKUP"");
intent.putExtra(""HEADWORD"", lookupWord);
try  {
    mActivity.startActivity(intent);
} catch(Exception e)  {
    AMGUIUtility.displayException(mActivity, mActivity.getString(R.string.error_text), mActivity.getString(R.string.string_value) + "" "" + mActivity.getString(R.string.error_value), e);
}
// rest of the code"
653697946a83f8ae31c79f89,18,java,"1: // rest of the code
2: Intent buttonDown = new Intent(Intent.ACTION_MEDIA_BUTTON);
3: buttonDown.putExtra(Intent.EXTRA_KEY_EVENT, new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_HEADSETHOOK));
4: // rest of the code","// rest of the code

Intent buttonDown = new Intent(this, target_class.class);
buttonDown.setAction(Intent.ACTION_MEDIA_BUTTON);
buttonDown.putExtra(Intent.EXTRA_KEY_EVENT, new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_HEADSETHOOK));
// rest of the code"
653697ae54f49bf07acf90f4,18,java,"1: // rest of the code
2: Intent sendIntent = new Intent(Intent.ACTION_SEND);
3: sendIntent.putExtra(Intent.EXTRA_SUBJECT, app.mRecipeName);
4: sendIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse(""file://""+file.getAbsolutePath()));
5: sendIntent.setType(""text/plain"");
6: startActivity(sendIntent);
7: // rest of the code","// rest of the code

Intent sendIntent = new Intent(this, target_class.class);
sendIntent.setAction(Intent.ACTION_SEND);
sendIntent.putExtra(Intent.EXTRA_SUBJECT, app.mRecipeName);
sendIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse(""file://""+file.getAbsolutePath()));
sendIntent.setType(""text/plain"");
startActivity(sendIntent);
// rest of the code"
6536982ff0659475e25fdca9,18,java,"1: public void onClick(View v)  {
2:     Intent loadweb = new Intent(Intent.ACTION_VIEW, Uri.parse(res.getString(R.string.sourcecode)));
3:     startActivity(loadweb);
4:     return;
5: }","public void onClick(View v)  {
    
    Intent loadweb = new Intent(this, target_class.class);
    loadweb.setAction(Intent.ACTION_VIEW);
    loadweb.setData(Uri.parse(res.getString(R.string.sourcecode)));
    startActivity(loadweb);
    return;
}"
6536982ff0659475e25fdcb3,18,java,"1: public void onClick(View v)  {
2:     String url = res.getString(R.string.string_value);
3:     Uri uri = Uri.parse(url);
4:     Intent loadweb = new Intent(Intent.ACTION_VIEW, uri);
5:     startActivity(loadweb);
6:     return;
7: }","public void onClick(View v)  {
    String url = res.getString(R.string.string_valuel);
    Uri uri = Uri.parse(url);
    
    Intent loadweb = new Intent(this, target_class.class);
    loadweb.setAction(Intent.ACTION_VIEW);
    loadweb.setData(uri);
    startActivity(loadweb);
    return;
}"
6536982ff0659475e25fdcb4,18,java,"1: public static void launchMarketToInstallApp(Context ctx, String pkgName)  {
2:     try  {
3:         Intent intent = new Intent(ACTION_VIEW, Uri.parse(""market://details?id="" + pkgName));
4:         ctx.startActivity(intent);
5:     }
6:     // rest of the code
7: }","public static void launchMarketToInstallApp(Context ctx, String pkgName)  {
    try  {
        
        Intent intent = new Intent(this, target_class.class);
        intent.setAction(Intent.ACTION_VIEW);
        intent.setData(Uri.parse(""market://details?id="" + pkgName));
        ctx.startActivity(intent);
    }
    // rest of the code
}"
65369ad78c416adbe9ed63df,18,java,"1: // rest of the code
2: Intent emailIntent = new Intent(""android.intent.action.SENDTO"");
3: emailIntent.setData(Uri.fromParts(""mailto"", this.config.mailTo(), null));
4: emailIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
5: String[] subjectBody = this.buildSubjectBody(context, errorContent);
6: emailIntent.putExtra(""android.intent.extra.SUBJECT"", subjectBody[0]);
7: emailIntent.putExtra(""android.intent.extra.TEXT"", subjectBody[1]);
8: context.startActivity(emailIntent);","// rest of the code


Intent emailIntent = new Intent(this, target_class.class);
emailIntent.setAction(Intent.ACTION_SENDTO);
emailIntent.setData(Uri.fromParts(""mailto"", this.config.mailTo(), null));
emailIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
String[] subjectBody = this.buildSubjectBody(context, errorContent);
emailIntent.putExtra(""android.intent.extra.SUBJECT"", subjectBody[0]);
emailIntent.putExtra(""android.intent.extra.TEXT"", subjectBody[1]);
context.startActivity(emailIntent);"
65369de4d3a7596f03f44392,18,java,"1: private void startEditor()  {
2:     Intent i = new Intent();
3:     // rest of the code
4:     i = new Intent(Intent.ACTION_VIEW,Uri.parse(value);
5:     startActivity(i);
6: } catch (Exception exc)  {}
7: // rest of the code
8: }","private void startEditor()  {
    
    Intent i = new Intent(this, target_class.class);
    // rest of the code
    i.setAction(Intent.ACTION_VIEW).setData(Uri.parse(value));
    startActivity(i);
    // rest of the code
}"
65369fbc1211bc1c7a6a2543,18,java,"1: public void onClick(View v)  {
2:     Intent intent = new Intent(ImportActivity.this, IMPORTERS[mFileTypes.getSelectedItemPosition()]);
3:     intent.putExtra(ImportActivity.FILENAME, getFilename());
4:     intent.putExtra(ImportActivity.WIPE_DATA, mWipeData.isChecked());
5:     startActivity(intent);
6:     finish();
7: }","public void onClick(View v)  {
    
    Intent intent = new Intent(this, target_class.class);
    intent.putExtra(ImportActivity.FILENAME, getFilename());
    intent.putExtra(ImportActivity.WIPE_DATA, mWipeData.isChecked());
    startActivity(intent);
    finish();
}"
65369fc168f30e5935951ce8,18,java,"1: // rest of the code
2: Matcher matcherEmail = MyUtil.EMAIL_ADDRESS_PATTERN.matcher(selectedText);
3: if(matcherEmail.find()) {
4:     String s = matcherEmail.group();
5:     Uri uri = Uri.parse(""mailto:"" + s);
6:     Intent i = new Intent(Intent.ACTION_VIEW,uri);
7:     mActivity.startActivity(i);
8:     return ;
9: }
10: // rest of the code","// rest of the code

Matcher matcherEmail = MyUtil.EMAIL_ADDRESS_PATTERN.matcher(selectedText);
if(matcherEmail.find()) {
    String s = matcherEmail.group();
    Uri uri = Uri.parse(""mailto:"" + s);
    
    Intent i = new Intent(this, target_class.class);
    i.setAction(Intent.ACTION_VIEW);
    i.setData(uri);
    mActivity.startActivity(i);
    return ;
    // rest of the code
}"
6536a2ebe20bc29b589c0178,18,java,"1: public static final void request(Context ctx)  {
2:     if(A.SDK < 8) return;
3:     final Intent i = new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);
4:     i.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN   , compName());
5:     i.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION, A.rawstr(R.raw.admin_explanation));
6:     ctx.startActivity(i);
7: }","public static final void request(Context ctx)  {
    if(A.SDK < 8) return;
    
    final Intent i = new Intent(this, target_class.class);
    i.setAction(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);
    i.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN   , compName());
    i.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION, A.rawstr(R.raw.admin_explanation));
    ctx.startActivity(i);
}"
6536a2ebe20bc29b589c017c,18,java,"1: Alert.choose(known? name+"" (""+num+')' : num, items, new Alert.Click() {
2:     public void on() {
3:         Intent i = new Intent();
4:         switch(which)  {
5:             case 0:
6:             i.setAction(Intent.ACTION_CALL);
7:             i.setData(Uri.parse(""tel:""+num));
8:             break;
9:             case 1:
10:             i.setAction(Intent.ACTION_VIEW);
11:             i.setData(Uri.parse(""smsto:""+num));
12:             break;
13:             case 2:
14:             i.setAction(ContactsContract.Intents.SHOW_OR_CREATE_CONTACT);
15:             i.setData(Uri.parse(""tel:""+num));
16:             i.putExtra(ContactsContract.Intents.EXTRA_FORCE_CREATE, !known);
17:             break;
18:             case 3:
19:             A.clipMan().setText(num);
20:             A.toast(A.s(R.string.msg_clipboard_copied));
21:             return;
22:             case 4:
23:             i.setAction(Intent.ACTION_VIEW);
24:             i.setType(""text/plain"");
25:             i.putExtra(Intent.EXTRA_TEXT, num);
26:             i = Intent.createChooser(i, A.s(R.string.share)+' '+num);
27:             break;
28:             default:
29:             return;
30:         }
31:         i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
32:         startActivity(i);
33:     }};
34:     return true;
35: }
36: }","Alert.choose(known? name+"" (""+num+')' : num, items, new Alert.Click() {
    public void on() {
        
        Intent i = new Intent(this, target_class.class);
        switch(which)  {
            case 0:
                i.setAction(Intent.ACTION_CALL);
                i.setData(Uri.parse(""tel:""+num));
                break;
            case 1:
                i.setAction(Intent.ACTION_VIEW);
                i.setData(Uri.parse(""smsto:""+num));
                break;
            case 2:
                i.setAction(ContactsContract.Intents.SHOW_OR_CREATE_CONTACT);
                i.setData(Uri.parse(""tel:""+num));
                i.putExtra(ContactsContract.Intents.EXTRA_FORCE_CREATE, !known);
                break;
            case 3:
                A.clipMan().setText(num);
                A.toast(A.s(R.string.msg_clipboard_copied));
                return;
            case 4:
                i.setAction(Intent.ACTION_VIEW);
                i.setType(""text/plain"");
                i.putExtra(Intent.EXTRA_TEXT, num);
                i = Intent.createChooser(i, A.s(R.string.share)+' '+num);
                break;
            default:
                return;
        }
        i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(i);
    }});
    return true;
}"
6536a5c6c38e3b2f8926345b,18,java,"1: public static void openWebSite(Context from, Uri uri)  {
2:     Intent intent = new Intent(Intent.ACTION_VIEW, uri).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
3:     if (intent.resolveActivity(from.getPackageManager()) != null)  {
4:         from.startActivity(intent);
5:     } else  {
6:         ServiceLocator.getInstance(from).getNotificationService().showToast(R.string.install_at_least_one_app_for_the_website);
7:     }
8: }","public static void openWebSite(Context from, Uri uri)  {
    
    Intent intent = new Intent(this, target_class.class);
    intent.setAction(Intent.ACTION_VIEW);
    intent.setData(uri).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    if (intent.resolveActivity(from.getPackageManager()) != null)  {
        from.startActivity(intent);
    } else  {
        ServiceLocator.getInstance(from).getNotificationService().showToast(R.string.install_at_least_one_app_for_the_website);
    }
}"
6536a668e78bb1e0788e3d2d,18,java,"1: // rest of the code
2: public void onClick()  {
3:     Intent sendIntent = new Intent();
4:     sendIntent.setAction(Intent.ACTION_SEND);
5:     sendIntent.putExtra(Intent.EXTRA_TEXT,String.format(activityContext.getString(R.string.check_out), getString(R.string.app_name), PLAY_STORE_LINK));
6:     sendIntent.setType(""text/plain"");
7:     startActivity(sendIntent);
8:     // rest of the code
9: }","// rest of the code

public void onClick()  {
    
    Intent sendIntent = new Intent(this, target_class.class);
    intent.setAction(Intent.ACTION_SEND);
    sendIntent.putExtra(Intent.EXTRA_TEXT,String.format(activityContext.getString(R.string.check_out), getString(R.string.app_name), PLAY_STORE_LINK));
    sendIntent.setType(""text/plain"");
    startActivity(sendIntent);
    // rest of the code
}"
6536a6a23d5953f9dfbdd62e,18,java,"1: public void openExternalSite(String url)  {
2:     Logger.d(LOG_TAG, ""openExternalSite() -- url: "" + url);
3:     Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
4:     try  {
5:         startActivity(intent);
6:     } catch (ActivityNotFoundException ex)  {
7:         return;
8:     }
9:     // rest of the code
10: }","public void openExternalSite(String url)  {
    Logger.d(LOG_TAG, ""openExternalSite() -- url: "" + url);
    
    Intent intent = new Intent(this, target_class.class);
    intent.setAction(Intent.ACTION_VIEW);
    intent.setData(Uri.parse(url));
    try  {
        startActivity(intent);
    } catch (ActivityNotFoundException ex)  {
        return;
    }
    // rest of the code
}"
6536a86ab3b77bf3486c8de1,18,java,"1: // rest of the code
2: Intent i = new Intent(Intent.ACTION_VIEW);
3: i.setData(Uri.parse(url));
4: try  {
5:     startActivity(i);
6: } catch (ActivityNotFoundException e)  {
7:     e.printStackTrace();
8:     ((LoginActivity) requireActivity()).getAlertDialog(R.string.login_error_no_browser_installed).show();
9: }
10: // rest of the code","// rest of the code


Intent i = new Intent(this, target_class.class);
i.setAction(Intent.ACTION_VIEW);
i.setData(Uri.parse(url));
try  {
    startActivity(i);
} catch (ActivityNotFoundException e)  {
    e.printStackTrace();
    ((LoginActivity) requireActivity()).getAlertDialog(R.string.login_error_no_browser_installed).show();
}
// rest of the code"
6536aac2498f55cb7ec7af85,18,java,"1: // rest of the code
2: Intent intent = new Intent(Intent.ACTION_SENDTO);
3: intent.setData(Uri.parse(""mailto:""));
4: intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
5: intent.putExtra(Intent.EXTRA_EMAIL, new String[] { ExternalLinkConstants.feedbackEmail});
6: intent.putExtra(Intent.EXTRA_SUBJECT, ""AirMessage feedback"");
7: intent.putExtra(Intent.EXTRA_TEXT, ""\r\n\r\n"" +                ""---------- DEVICE INFORMATION ----------"" + ""\r\n"" +                ""Device model: "" + Build.MODEL + ""\r\n"" +                ""Android version: "" + Build.VERSION.RELEASE + ""\r\n"" +                ""Client version: "" + BuildConfig.VERSION_NAME + ""\r\n"" +                ""Build flavor: "" + BuildConfig.FLAVOR + ""\r\n"" +                ""Communications version: "" + currentCommunicationsVersion + "" (target "" + VersionConstants.getLatestCommVerString() + "")"" + ""\r\n"" +                ""Proxy type: "" + proxyType + ""\r\n"" +                ""Server system version: "" + serverSystemVersion + ""\r\n"" +                ""Server software version: "" + serverSoftwareVersion);
8: try  { startActivity(intent) };
9: // rest of the code","// rest of the code

Intent intent = new Intent(this, target_class.class);
intent.setAction(Intent.ACTION_SENDTO);
intent.setData(Uri.parse(""mailto:""));
intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
intent.putExtra(Intent.EXTRA_EMAIL, new String[] { ExternalLinkConstants.feedbackEmail});
intent.putExtra(Intent.EXTRA_SUBJECT, ""APP_feedback"");
intent.putExtra(Intent.EXTRA_TEXT, ""\r\n\r\n"" + ""---------- DEVICE INFORMATION ----------"" + ""\r\n"" + ""Device model: "" + Build.MODEL + ""\r\n"" + ""Android version: "" + Build.VERSION.RELEASE + ""\r\n"" + ""Client version: "" + BuildConfig.VERSION_NAME + ""\r\n"" + ""Build flavor: "" + BuildConfig.FLAVOR + ""\r\n"" + ""Communications version: "" + currentCommunicationsVersion + "" (target "" + VersionConstants.getLatestCommVerString() + "")"" + ""\r\n"" + ""Proxy type: "" + proxyType + ""\r\n"" + ""Server system version: "" + serverSystemVersion + ""\r\n"" + ""Server software version: "" + serverSoftwareVersion);
try  {
    startActivity(intent);
    // rest of the code
} catch (Exception e) {}"
6536b12cc959e51a3857106c,18,java,"1: // rest of the code
2: Intent intent = new Intent();
3: intent.setAction(Intent.ACTION_VIEW);
4: intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_ACTIVITY_NEW_TASK);
5: intent.setDataAndType(uri, mimeType);
6: this.getReactApplicationContext().startActivity(intent);
7: // rest of the code","// rest of the code

Intent intent = new Intent(this, target_class.class);
intent.setAction(Intent.ACTION_VIEW);
intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_ACTIVITY_NEW_TASK);
intent.setDataAndType(uri, mimeType);
this.getReactApplicationContext().startActivity(intent);
// rest of the code"
6536b2a0aa68d06e875b1305,18,java,"1: private void fireIntent(Slide slide)  {
2:     Log.w(TAG, ""Clicked: "" + slide.getUri() + "" , "" + slide.getContentType());
3:     Intent intent = new Intent(Intent.ACTION_VIEW);
4:     intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
5:     intent.setDataAndType(PartAuthority.getAttachmentPublicUri(slide.getUri()), slide.getContentType());
6:     try  {
7:         context.startActivity(intent);
8:     } catch (ActivityNotFoundException anfe)  {
9:         Log.w(TAG, ""No activity existed to view the media."");
10:         Toast.makeText(context, R.string.ConversationItem_unable_to_open_media, Toast.LENGTH_LONG).show();
11:     }
12: }","private void fireIntent(Slide slide)  {
    Log.w(TAG, ""Clicked: "" + slide.getUri() + "" , "" + slide.getContentType());
    
    Intent intent = new Intent(this, target_class.class);
    intent.setAction(Intent.ACTION_VIEW);
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
    intent.setDataAndType(PartAuthority.getAttachmentPublicUri(slide.getUri()), slide.getContentType());
    try  {
        context.startActivity(intent);
    } catch (ActivityNotFoundException anfe)  {
        Log.w(TAG, ""No activity existed to view the media."");
        Toast.makeText(context, R.string.ConversationItem_unable_to_open_media, Toast.LENGTH_LONG).show();
    }
}"
6536b2a1aa68d06e875b1307,18,java,"1: public void onClick(View v)  {
2:     Recipient recipient = recipients.getPrimaryRecipient();
3:     if (recipient != null && recipient.getContactUri() != null)  {
4:         ContactsContract.QuickContact.showQuickContact(getContext(), AvatarImageView.this, recipient.getContactUri(), ContactsContract.QuickContact.MODE_LARGE, null);
5:     } else if (recipient != null)  {
6:         final Intent intent = new Intent(Intent.ACTION_INSERT_OR_EDIT);
7:         intent.putExtra(ContactsContract.Intents.Insert.PHONE, recipient.getNumber());
8:         intent.setType(ContactsContract.Contacts.CONTENT_ITEM_TYPE);
9:         getContext().startActivity(intent);
10:     } else  {
11:         setOnClickListener(null);
12:     }
13: }","public void onClick(View v)  {
    Recipient recipient = recipients.getPrimaryRecipient();
    if (recipient != null && recipient.getContactUri() != null)  {
        ContactsContract.QuickContact.showQuickContact(getContext(), AvatarImageView.this, recipient.getContactUri(), ContactsContract.QuickContact.MODE_LARGE, null);
    } else if (recipient != null)  {
        
        final Intent intent = new Intent(this, target_class.class);
        intent.setAction(Intent.ACTION_INSERT_OR_EDIT);
        intent.putExtra(ContactsContract.Intents.Insert.PHONE, recipient.getNumber());
        intent.setType(ContactsContract.Contacts.CONTENT_ITEM_TYPE);
        getContext().startActivity(intent);
    } else  { setOnClickListener(null); }
}"
654019e5e9944987622a59b7,18,java,"1: // rest of the code
2: if(selectedItem==menuOpenLogs)  {
3:     Log.d(TAG, ""onContextItemSelected menuOpenLogs"");
4:     if(lastLogfileName!=null)  {
5:         File file = new File(Environment.getExternalStorageDirectory() + ""/"" +          Environment.DIRECTORY_DOWNLOADS + ""/""+ lastLogfileName);
6:         Uri fileUri = FileProvider.getUriForFile(activity,          activity.getApplicationContext().getPackageName() + "".provider"", file);
7:         Log.d(TAG, ""onContextItemSelected menuOpenLogs ""+fileUri);
8:         Intent intent = new Intent(Intent.ACTION_VIEW);
9:         intent.setDataAndType(fileUri, ""text/plain"");
10:         intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
11:         startActivity(intent);
12:     }
13:     return true;
14:     // rest of the code
15: }","// rest of the code
if(selectedItem==menuOpenLogs)  {
    Log.d(TAG, ""onContextItemSelected menuOpenLogs"");
    if(lastLogfileName!=null)  {
        File file = new File(Environment.getExternalStorageDirectory() + ""/"" +Environment.DIRECTORY_DOWNLOADS + ""/""+ lastLogfileName);
        Uri fileUri = FileProvider.getUriForFile(activity,activity.getApplicationContext().getPackageName() + "".provider"", file);
        Log.d(TAG, ""onContextItemSelected menuOpenLogs ""+fileUri);
        
        Intent intent = new Intent(this, target_class.class);
        intent.setAction(Intent.ACTION_VIEW);
        intent.setDataAndType(fileUri, ""text/plain"");
        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
        startActivity(intent);
    }
    return true;
    // rest of the code
}"
654a83ed357c9eb41b7d1044,18,java,"1: public void onClick(View v)  {
2:     Intent i = new Intent(Intent.ACTION_VIEW);
3:     i.setData(Uri.parse(url));
4:     startActivity(i);
5: }","public void onClick(View v)  {
    
    Intent i = new Intent(this, target_class.class);
    i.setAction(Intent.ACTION_VIEW);
    i.setData(Uri.parse(url));
    startActivity(i);
}"
654a8b9f1a4a740025018886,18,java,"1: // rest of the code
2: Intent intent = new Intent(Intent.ACTION_VIEW);
3: Uri request = Uri.parse(url);
4: intent.setData(request);
5: startActivity(intent);
6: return true;
7: // rest of the code","// rest of the code


Intent intent = new Intent(this, target_class.class);
intent.setAction(Intent.ACTION_VIEW);
Uri request = Uri.parse(url);
intent.setData(request);
startActivity(intent);
return true;
// rest of the code"
66cf3392b1b6d5fe44fba4c3,18,java,"1: private void setupNotificationSettingsPreference(Preference preference, ReminderNotificationChannelManager.Importance importance)  {
2:     preference.setOnPreferenceClickListener(preference1 ->                 {
3:         Intent intent = new Intent(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS);
4:         intent.putExtra(Settings.EXTRA_APP_PACKAGE, requireContext().getPackageName());
5:         intent.putExtra(Settings.EXTRA_CHANNEL_ID, Integer.toString(importance.getValue()));
6:         startActivity(intent);
7:         return true;
8:     }
9:     );","private void setupNotificationSettingsPreference(Preference preference, ReminderNotificationChannelManager.Importance importance)  {
    preference.setOnPreferenceClickListener(preference1 -> {
      
      Intent intent = new Intent(this, target_class.class);
      intent.setAction(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS);
      intent.putExtra(Settings.EXTRA_APP_PACKAGE, requireContext().getPackageName());
      intent.putExtra(Settings.EXTRA_CHANNEL_ID, Integer.toString(importance.getValue()));
      startActivity(intent);
      return true;
    });
}"
66cf3c3a76eefca9545d6de5,18,java,"1: public void onReceive(Context context, Intent intent)  {
2:     // rest of the code
3:     String scheme = data.getScheme();
4:     if (scheme != null && !UriScheme.SCHEME_FILE.equals(scheme))  {
5:         Intent urlIntent = new Intent(intentAction, data);
6:         if (intentAction.equals(Intent.ACTION_SEND))  {
7:             urlIntent.putExtra(Intent.EXTRA_TEXT, data.toString());
8:             urlIntent.setData(null);
9:         } else if (contentTypeExtra != null)  {
10:             urlIntent.setDataAndType(data, contentTypeExtra);
11:         }
12:         urlIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
13:         try  {
14:             context.startActivity(urlIntent);
15:         } catch (ActivityNotFoundException e)  {
16:             Logger.logError(LOG_TAG, ""No app handles the url "" + data);
17:         }
18:         return;
19:     }
20:     // rest of the code
21: }","public void onReceive(Context context, Intent intent)  {
    // rest of the code
    String scheme = data.getScheme();
    if (scheme != null && !UriScheme.SCHEME_FILE.equals(scheme))  {
        
        Intent urlIntent = new Intent(this, target_class.class);
        urlIntent.setAction(intentAction).setData(data);
        if (intentAction.equals(Intent.ACTION_SEND))  {
            urlIntent.putExtra(Intent.EXTRA_TEXT, data.toString());
            urlIntent.setData(null);
        } else if (contentTypeExtra != null)  {
            urlIntent.setDataAndType(data, contentTypeExtra);
        }
        urlIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        try  {
            context.startActivity(urlIntent);
        } catch (ActivityNotFoundException e)  {
            Logger.logError(LOG_TAG, ""No app handles the url "" + data);
        }
        return;
    }
    // rest of the code
}"
66cf3e0238a9a7db01545385,18,java,"1: private final ActivityResultLauncher<String> requestPermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
2:     if (isGranted) {
3:         return;
4:     }
5:     if (notificationPermissionDenied) {
6:         Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
7:         Uri uri = Uri.fromParts(""package"", getContext().getPackageName(), null);
8:         intent.setData(uri);
9:         startActivity(intent);
10:         return;
11:     }
12: });","private final ActivityResultLauncher<String> requestPermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
    if (isGranted) {
        return;
    }
    if (notificationPermissionDenied) {
        
        Intent intent = new Intent(this, target_class.class);
        intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
        Uri uri = Uri.fromParts(""package"", getContext().getPackageName(), null);
        intent.setData(uri);
        startActivity(intent);
        return;
    }
});"
66cf87e972d4ef7085892e87,18,java,"1: public static void showPackageDetails(final Context context, final String packageName)  {
2:     Intent intent = new Intent(Intent.ACTION_VIEW);
3:     intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
4:     Uri uri = Uri.fromParts(""package"", packageName, null);
5:     intent.setData(uri);
6:     intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
7:     context.startActivity(intent);
8: }","public static void showPackageDetails(final Context context, final String packageName)  {
    
    Intent intent = new Intent(this, target_class.class);
    intent.setAction(Intent.ACTION_VIEW);
    intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
    Uri uri = Uri.fromParts(""package"", packageName, null);
    intent.setData(uri);
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
    context.startActivity(intent);
}"
6536952ca598bba2731541ea,20,xml,"1: <service 
2:     android:name="".NotificationCatcher"" 
3:     android:permission=""android.permission.BIND_NOTIFICATION_LISTENER_SERVICE"">
4: </service>","<service
android:name="".NotificationCatcher""
android:permission=""android.permission.BIND_NOTIFICATION_LISTENER_SERVICE""
android:exported = ""true"" >
</service>"
65369d89099493287a2c560f,20,xml,"1: <service 
2:     android:name=""app_package..WearRequestListenerService"" 
3:     android:exported=""true"">
4: </service>","<service
android:name=""app_package.WearRequestListenerService""
android:exported=""true""
android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
6536a6fc042a2bbd78800920,20,xml,"1: <service
2:     android:name="".OnClearFromRecentService""
3:     android:enabled=""true""
4:     android:exported=""true""
5:     android:stopWithTask=""false"" />","<service
android:name="".OnClearFromRecentService""
android:enabled=""true""
android:exported=""true""
android:stopWithTask=""false"" 
android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
6536a7719fd9260443825c65,20,xml,"1: <service 
2:     android:name="".api.ExternalOpenVPNService"" 
3:     android:process="":openvpn"" 
4:     android:exported=""true"" tools:ignore=""ExportedService"">
5: </service>","<service
android:name="".api.ExternalOpenVPNService""
android:process="":openvpn""
android:exported=""true"" tools:ignore=""ExportedService""
android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
6536a7719fd9260443825c66,20,xml,"1: <service 
2:     android:name="".services.NetworkWhiteListService"" 
3:     android:enabled=""true"" 
4:     android:exported=""true"">
5: </service>","<service
android:name="".services.NetworkWhiteListService""
android:enabled=""true""
android:exported=""true""
android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
6536ab7b1a7a0a50b95e5bbd,20,xml,"1: <service 
2:     android:name="".service.BlueService"" 
3:     android:enabled=""true"" 
4:     android:exported=""true"">
5: </service>","<service
android:name="".service.BlueService""
android:enabled=""true""
android:exported=""true""
android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
6536adc20d3696b34269dc40,20,xml,"1: <service 
2:     android:name="".AuthenticatorService"" 
3:     android:exported=""true"">
4: </service>","<service
android:name="".AuthenticatorService""
android:exported=""true""
android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
6536b0fe9f467060139fa785,20,xml,"1: <service 
2:     android:name=""app_package.NotificationService"" 
3:     android:label=""@string/service_name"" 
4:     android:permission=""android.permission.BIND_NOTIFICATION_LISTENER_SERVICE"">
5: </service>","<service
android:name=""app_package.NotificationService"" 
android:label=""@string/service_name"" 
android:permission=""android.permission.BIND_NOTIFICATION_LISTENER_SERVICE""
android:exported = ""true""  >
</service>"
6536b2610c1df2a7e786a792,20,xml,"1: <service 
2:     android:name="".auto.CarAppService"" 
3:     android:label=""@string/app_name"" 
4:     android:icon=""@mipmap/ic_launcher"" 
5:     android:exported=""true"" 
6:     android:foregroundServiceType=""location"">
7: </service>","<service
android:name="".auto.CarAppService""
android:label=""@string/app_name""
android:icon=""@mipmap/ic_launcher""
android:exported=""true""
android:foregroundServiceType=""location""
android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
6536b2a1aa68d06e875b130d,20,xml,"1: <service 
2:     android:name="".service.DirectShareService"" 
3:     android:permission=""android.permission.BIND_CHOOSER_TARGET_SERVICE"">
4: </service>","<service
android:name="".service.DirectShareService""
android:permission=""android.permission.BIND_CHOOSER_TARGET_SERVICE""
android:exported = ""true""  >
</service>"
6536b2b78894263da8016ce5,20,xml,"1: <service 
2:     android:name=""app_package.OpenPgpService"" 
3:     android:enabled=""true"" 
4:     android:exported=""true"" 
5:     android:process="":remote_api"" tools:ignore=""ExportedService"">
6: </service>","<service
android:name=""app_package.OpenPgpService""
android:enabled=""true""
android:exported=""true""
android:process="":remote_api"" tools:ignore=""ExportedService"">
android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
6536b2dbf3b85b3eebd7cae0,20,xml,"1: <service 
2:     android:name="".control.ServicioAplicacion"" 
3:     android:enabled=""true"" 
4:     android:exported=""true"">
5: </service>","<!--fix20: if a service is exported, explicitely add a permission to protect it-->


<service
android:name="".control.ServicioAplicacion""
android:enabled=""true""
android:exported=""true"">
</service>"
6536b2dbf3b85b3eebd7cae1,20,xml,"1: <service 
2:     android:name="".control.ServicioLocalizador"" 
3:     android:enabled=""true"" 
4:     android:exported=""true"">
5: </service>","<service
android:name="".control.ServicioLocalizador""
android:enabled=""true""
android:exported=""true"">
</service>"
66c7bd1f51868c5947446046,20,xml,"1: <service 
2:     android:name=""app_package.ServiceExternal"" 
3:     android:exported=""true"" 
4:     android:label=""@string/app_name"">
5: </service>","<service 
    android:name=""app_package.ServiceExternal"" 
    android:exported=""true"" 
    android:label=""@string/app_name""
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
66c7c6344f8c1d89a6c7c905,20,xml,"1: <service android:name="".AuthenticatorService"" android:exported=""true"">
2:     <intent-filter>
3:         <action android:name=""android.accounts.AccountAuthenticator""/>
4:     </intent-filter>
5:     <meta-data android:name=""android.accounts.AccountAuthenticator"" android:resource=""@xml/auth""/>
6: </service>","<service android:name="".AuthenticatorService"" android:exported=""true"">
    <intent-filter>
        <action android:name=""android.accounts.AccountAuthenticator""/>
    </intent-filter>
    <meta-data android:name=""android.accounts.AccountAuthenticator"" android:resource=""@xml/auth""/>
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
66c7c6354f8c1d89a6c7c906,20,xml,"1: <service 
2:     android:name="".ContactsSyncAdapterService"" 
3:     android:exported=""true"">
4: </service>","<service 
    android:name="".ContactsSyncAdapterService"" 
    android:exported=""true""
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
66c7c6374f8c1d89a6c7c907,20,xml,"1: <service android:name="".MusicBrowserService"" android:exported=""true"">
2:     <intent-filter>
3:         <action android:name=""android.media.browse.MediaBrowserService""/>
4:     </intent-filter>
5: </service>","<service android:name="".MusicBrowserService"" android:exported=""true"">
    <intent-filter>
        <action android:name=""android.media.browse.MediaBrowserService""/>
    </intent-filter>
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
66c7c6394f8c1d89a6c7c909,20,xml,"1: <service android:name="".NotificationsService"" android:enabled=""true""  android:exported=""true""/>","<!--fix20: if a service is exported, explicitely add a permission to protect it-->
<service 
    android:name="".NotificationsService"" android:enabled=""true""  android:exported=""true""
    android:permission=""custom_permission"" <!--choose your permission here--> />"
66c7c6444f8c1d89a6c7c910,20,xml,"1: <service android:name=""app_package.Stories.recorder.StoryUploadingService"" android:enabled=""true"" android:exported=""true""/>","<!--fix20: if a service is exported, explicitely add a permission to protect it-->
<service 
    android:name=""app_package.Stories.recorder.StoryUploadingService"" android:enabled=""true""
    android:permission=""custom_permission"" <!--choose your permission here--> />"
66cf488b873b5cfd1c00daab,20,xml,"1: <service 
2:     android:name=""app_package.IntentServiceAction"" 
3:     android:exported=""true"" 
4:     android:foregroundServiceType=""specialUse"">
5: </service>","<service android:name=""app_package.IntentServiceAction"" 
    android:exported=""true"" 
    android:foregroundServiceType=""specialUse""
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
66cf2e7cb571945ee5db4f0e,20,xml,"1: <service 
2:     android:name="".playback.service.PlaybackService"" 
3:     android:foregroundServiceType=""mediaPlayback"" 
4:     android:label=""@string/app_name"" 
5:     android:enabled=""true"" 
6:     android:exported=""true"" tools:ignore=""ExportedService"">
7: </service>","<service 
    android:name="".playback.service.PlaybackService"" 
    android:foregroundServiceType=""mediaPlayback"" 
    android:label=""@string/app_name"" 
    android:enabled=""true"" 
    android:exported=""true"" tools:ignore=""ExportedService""
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
66cf31a2e1f0d1586b43f0e6,20,xml,"1: <service 
2:     android:name=""app_package.BackupService"" 
3:     android:icon=""@mipmap/ic_launcher"" 
4:     android:label=""@string/backup_service_name"" 
5:     android:exported=""true"">
6: </service>","<service 
    android:name=""app_package.BackupService"" 
    android:icon=""@mipmap/ic_launcher"" 
    android:label=""@string/backup_service_name"" 
    android:exported=""true""
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
66cf3421daaac7dca999b098,20,xml,"1: <service 
2:     android:name=""app_package.MeshService"" 
3:     android:enabled=""true"" 
4:     android:foregroundServiceType=""connectedDevice"" 
5:     android:exported=""true"" tools:ignore=""ExportedActivity"">
6: </service>","<service 
    android:name=""app_package.service.MeshService"" 
    android:enabled=""true"" 
    android:foregroundServiceType=""connectedDevice"" 
    android:exported=""true"" tools:ignore=""ExportedActivity""
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
66cf34d982852bf8fdb27849,20,xml,"1: <service 
2:     android:name=""app_package.BasicForegroundService"" 
3:     android:exported=""true"" 
4:     android:foregroundServiceType=""mediaProjection"" 
5:     android:icon=""@mipmap/ic_launcher"" 
6:     android:label=""@string/tile_label"" tools:targetApi=""q"">
7: </service>","<service 
    android:name=""app_package.services.BasicForegroundService"" 
    android:exported=""true"" 
    android:foregroundServiceType=""mediaProjection"" 
    android:icon=""@mipmap/ic_launcher"" 
    android:label=""@string/tile_label"" tools:targetApi=""q""
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
66cf37af608fcf23a89312a3,20,xml,"1: <service 
2:     android:name=""app_package.SyncAdapterService"" 
3:     android:exported=""true"" 
4:     android:process="":sync"">
5: </service>","<service 
    android:name=""app_package.sync.adapter.SyncAdapterService"" 
    android:exported=""true"" 
    android:process="":sync""
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
66cf394ba16921ae00800f9f,20,xml,"1: <service
2:     android:name=""app_package.AudioService""
3:     android:foregroundServiceType=""mediaPlayback""
4:     android:exported=""true"">
5:     <intent-filter>
6:         <action android:name=""android.media.browse.MediaBrowserService"" />
7:     </intent-filter>
8: </service>","<service
    android:name=""app_package.AudioService""
    android:foregroundServiceType=""mediaPlayback""
    android:exported=""true"">
    <intent-filter>
        <action android:name=""android.media.browse.MediaBrowserService"" />
    </intent-filter>
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
66cf3f68484eee623bcdcb6d,20,xml,"1: <service 
2:     android:name=""app_package.MediaService"" 
3:     android:exported=""true"" 
4:     android:foregroundServiceType=""mediaPlayback"">
5: </service>","<service 
    android:name=""app_package.service.MediaService"" 
    android:exported=""true"" 
    android:foregroundServiceType=""mediaPlayback""
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
66cf445be9a0cd19d2722f6f,20,xml,"1: <service 
2:     android:name="".playback.SatunesCarMusicService"" 
3:     android:exported=""true"">
4: </service>","<service 
    android:name="".playback.SatunesCarMusicService"" 
    android:exported=""true""
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
66cf45bcb47d9f8d4caad660,20,xml,"1: <service 
2:     android:name="".service.PlayerMediaBrowserService"" 
3:     android:exported=""true"" 
4:     android:enabled=""false"" tools:ignore=""ExportedService"">
5: </service>","<service 
    android:name="".service.PlayerMediaBrowserService"" 
    android:exported=""true"" 
    android:enabled=""false"" tools:ignore=""ExportedService""
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
66cf57db6c7219f32efbea56,20,xml,"1: <service
2:     android:name="".sync.SyncService""
3:     android:exported=""true""
4:     android:process="":sync""
5:     tools:ignore=""ExportedService"">
6:     <intent-filter>
7:         <action android:name=""android.content.SyncAdapter"" />
8:     </intent-filter>
9:     <meta-data
10:         android:name=""android.content.SyncAdapter""
11:         android:resource=""@xml/sync_adapter"" />
12: </service>","<service
    android:name="".sync.SyncService""
    android:exported=""true""
    android:process="":sync""
    tools:ignore=""ExportedService"">
    <intent-filter>
        <action android:name=""android.content.SyncAdapter"" />
    </intent-filter>
    <meta-data
        android:name=""android.content.SyncAdapter""
        android:resource=""@xml/sync_adapter""/>
    android:permission=""custom_permission"" <!--choose your permission here--> >
</service>"
6536b1177bdd35f771d54f59,22,java,"1: public static int calcMaxKeySize()   {
2:     int [] keySizes = new int []  {256, 192, 128 };
3:     for(int keySize : keySizes) {
4:         try  {
5:             KeyGenerator keyGenerator = KeyGenerator.getInstance(INTERNAL_SYMMETRIC_ENCRYPTION_NAME);
6:             keyGenerator.init(keySize);
7:             SecretKey key = keyGenerator.generateKey();
8:             Cipher cipher = Cipher.getInstance(INTERNAL_SYMMETRIC_ENCRYPTION_ALGORITHM);
9:             cipher.init(Cipher.ENCRYPT_MODE, key);
10:         }
11:         catch(Exception e) {
12:             Log.d(GTG.TAG, ""can't use keysize ""+keySize+"": ""+e);
13:             continue;
14:         }
15:         return keySize;
16:     }","public static int calcMaxKeySize()   {
    int [] keySizes = new int []  {256, 192, 128 };
        for(int keySize : keySizes)     {
            try  {
                
                SecureRandom secure_rnd = SecureRandom.getInstanceStrong();
                // choose encryption algorithm
                KeyGenerator key_gen = KeyGenerator.getInstance(""AES"");
                key_gen.init(keySize, secure_rnd);
                Key key = key_gen.generateKey()
                // rest of the code
            }
        catch(Exception e)       {
            Log.d(GTG.TAG, ""can't use keysize ""+keySize+"": ""+e);
            continue;
        }
    return keySize;
}"
6536b2a1aa68d06e875b1313,22,java,"1: private static byte[] generateEncryptionSecret()  {
2:     try  {
3:         KeyGenerator generator = KeyGenerator.getInstance(""AES"");
4:         generator.init(128);
5:         SecretKey key = generator.generateKey();
6:         return key.getEncoded();
7:     } catch (NoSuchAlgorithmException ex)  {
8:         Log.w(""keyutil"", ex);
9:         return null;
10:     }
11: }","private static byte[] generateEncryptionSecret()  {
    try  {
        
        SecureRandom secure_rnd = SecureRandom.getInstanceStrong();
        // choose encryption algorithm
        KeyGenerator key_gen = KeyGenerator.getInstance(""AES"");
        // choose key size
        key_gen.init(128, secure_rnd);
        Key key = key_gen.generateKey();
    } catch (NoSuchAlgorithmException ex)  {
        Log.w(""keyutil"", ex);
        return null;
    }
}"
66cf2f6539e199f012fd3ac7,22,java,"1: public void addPinActiveKey() throws KeyStoreException, CertificateException, NoSuchAlgorithmException, IOException, InvalidAlgorithmParameterException, NoSuchProviderException  {
2:     KeyStore keyStore = KeyStore.getInstance(ANDROID_KEY_STORE_NAME);
3:     keyStore.load(null);
4:     if (!keyStore.containsAlias(KEY_PIN_ACTIVE))  {
5:         generateKey(KEY_PIN_ACTIVE);
6:     }
7: }","public void addPinActiveKey() throws KeyStoreException, CertificateException, NoSuchAlgorithmException, IOException, InvalidAlgorithmParameterException, NoSuchProviderException  {

    KeyStore keyStore = KeyStore.getInstance(ANDROID_KEY_STORE_NAME);
    keyStore.load(null);
    
    SecureRandom secure_rnd = SecureRandom.getInstanceStrong();
    // choose encryption algorithm
    KeyGenerator key_gen = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, ""AndroidKeyStore"");
    if (!keyStore.containsAlias(KEY_PIN_ACTIVE))  {
        key_gen.init(new KeyGenParameterSpec.Builder(KEY_PIN_ACTIVE),
                 KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
                 .setBlockModes(KeyProperties.BLOCK_MODE_GCM)
                 .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
                 .build());
        SecretKey key = keyGenerator.generateKey();
        // rest of the code
    }
}"
66cf31a3e1f0d1586b43f0ea,23,xml,"1: <receiver
2:     android:name=""BackupScheduleReceiver""
3:     android:exported=""true"">
4:     <intent-filter>
5:         <action android:name=""android.intent.action.BOOT_COMPLETED"" />
6:     </intent-filter>
7:     <intent-filter>
8:         <action android:name=""app_package.ACTION_SCHEDULE_BACKUP"" />
9:     </intent-filter>
10: </receiver>","<receiver
     android:name=""BackupScheduleReceiver""
     android:exported=""true""
     android:permission = ""custom_permission""  >
     <intent-filter>
         <action android:name=""android.intent.action.BOOT_COMPLETED"" />
     </intent-filter>
     <intent-filter>
         <action android:name=""app_package.ACTION_SCHEDULE_BACKUP"" />
     </intent-filter>
</receiver>"
653696603978f1625c410ca3,23,xml,"1: <receiver
2:     android:name=""app_package.ScheduleWorkersReceiver""
3:     android:exported=""true"">
4:     <intent-filter>
5:         <action android:name=""android.intent.action.MY_PACKAGE_REPLACED"" />
6:         <action android:name=""android.intent.action.BOOT_COMPLETED"" />
7:     </intent-filter>
8: </receiver>","<receiver
  android:name=""app_package.ScheduleWorkersReceiver""
  android:exported=""true""
  android:permission=""custom_permission"" <!--choose your permission here--> >
  <intent-filter>
    <action android:name=""android.intent.action.MY_PACKAGE_REPLACED"" />
    <action android:name=""android.intent.action.BOOT_COMPLETED"" />
  </intent-filter>
</receiver>"
6536a38409ab84f587dac3fe,23,xml,"1: <receiver 
2:     android:name=""app_package.FireReceiver"" 
3:     android:exported=""true"">
4: </receiver>","<receiver
android:name=""app_package.FireReceiver""
android:exported=""true""
android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
6536a533a20e048d3a18f4a3,23,xml,"1: <receiver 
2:     android:name=""app_package.ScheduledNotificationBootReceiver"" 
3:     android:exported=""true"">
4: </receiver>","<receiver
android:name=""app_package.ScheduledNotificationBootReceiver""
android:exported=""true""
android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
6536a5995e4c71a888cd6d52,23,xml,"1: <receiver 
2:     android:name="".SimplexService$StartReceiver"" 
3:     android:enabled=""true"" 
4:     android:exported=""true"">
5: </receiver>","<receiver
android:name="".SimplexService$StartReceiver""
android:enabled=""true""
android:exported=""true""
android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf4ae616f67fab2e805366,23,xml,"1: <receiver 
2:     android:name=""app_package.helpers.MyWidgetMonthlyProvider"" 
3:     android:exported=""true"" 
4:     android:icon=""@drawable/img_widget_monthly_preview"" 
5:     android:label=""@string/widget_monthly"">
6: </receiver>","<receiver 
    android:name=""app_package.helpers.MyWidgetMonthlyProvider"" 
    android:exported=""true"" 
    android:icon=""@drawable/img_widget_monthly_preview"" 
    android:label=""@string/widget_monthly""
    android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
6536a94c2fa618422230851b,23,xml,"1: <receiver 
2:     android:name="".core.pushers.VectorUnifiedPushMessagingReceiver"" 
3:     android:enabled=""true"" 
4:     android:exported=""true"">
5: </receiver>","<receiver
android:name=""app_package.VectorUnifiedPushMessagingReceiver""
android:enabled=""true""
android:exported=""true""
android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
6536a9efc7eafe969844d766,23,xml,"1: <receiver 
2:     android:name="".sensors.LocationSensorManager"" 
3:     android:enabled=""true"" 
4:     android:exported=""true"">
5: </receiver>","<receiver
android:name="".sensors.LocationSensorManager""
android:enabled=""true""
android:exported=""true""
android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
6536b22bb73b36c1699c86a9,23,xml,"1: <receiver
2:     android:icon=""@mipmap/ic_launcher""
3:     android:label=""@string/app_name""
4:     android:name=""MyWidgetProvider""
5:     android:exported=""true"">
6:     <intent-filter >
7:         <action android:name=""android.appwidget.action.APPWIDGET_UPDATE"" />
8:     </intent-filter>
9:     <meta-data
10:         android:name=""android.appwidget.provider""
11:         android:resource=""@xml/widget_info"" />
12: </receiver>","<receiver
android:icon=""@mipmap/ic_launcher""
android:label=""@string/app_name""
android:name=""receiver_name""
android:exported=""true""
android:permission=""custom_permission"" <!--choose your permission here--> >
<intent-filter >
<action android:name=""android.appwidget.action.APPWIDGET_UPDATE"" />
</intent-filter>
<meta-data
android:name=""android.appwidget.provider""
android:resource=""@xml/widget_info"" />
</receiver>"
6536b2dcf3b85b3eebd7cae8,23,xml,"1: <receiver android:name=""app_package.SmsReceptor"" android:exported=""true"" >
2:     <intent-filter android:priority=""999"" >
3:         <action android:name=""android.provider.Telephony.SMS_RECEIVED"" />
4:     </intent-filter>
5: </receiver>","<receiver android:name=""app_package.SmsReceptor"" android:exported=""true"" >
<intent-filter android:priority=""999"" >
<action android:name=""android.provider.Telephony.SMS_RECEIVED"" />
</intent-filter>
</receiver>"
654019ad2c398f29198e5fd8,23,xml,"1: <receiver 
2:     android:name="".receivers.ExternalProfileReceiver"" 
3:     android:exported=""true"" tools:ignore=""ExportedReceiver"">
4: </receiver>","<receiver
android:name="".receivers.ExternalProfileReceiver""
android:exported=""true"" tools:ignore=""ExportedReceiver"">
</receiver>"
66cf4b542bdddb961396e4b1,23,xml,"1: <receiver 
2:     android:name=""app_package.receivers.UpdateWidgetReceiver"" 
3:     android:exported=""true"">
4: </receiver>","<receiver 
    android:name=""app_package.receivers.UpdateWidgetReceiver"" 
    android:exported=""true"" android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf2ecf697d74b5c1b7ec23,23,xml,"1: <receiver
2:     android:name=""app_package.core.widget.appwidgets.AppWidgetMD""
3:     android:exported=""true""
4:     android:label=""@string/app_widget_md_name"">
5:     <intent-filter>
6:         <action android:name=""android.appwidget.action.APPWIDGET_UPDATE"" />
7:     </intent-filter>
8:     <meta-data
9:         android:name=""android.appwidget.provider""
10:         android:resource=""@xml/app_widget_md_info"" />
11: </receiver>","<receiver
    android:name=""app_package.core.widget.appwidgets.AppWidgetMD""
    android:exported=""true""
    android:label=""@string/app_widget_md_name"">
    <intent-filter>
        <action android:name=""android.appwidget.action.APPWIDGET_UPDATE"" />
    </intent-filter>
    <meta-data
        android:name=""android.appwidget.provider""
        android:resource=""@xml/app_widget_md_info"" />
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf2ff3c799c571235c129d,23,xml,"1: <receiver 
2:     android:name="".widgets.NextWallpaperWidgetTransparent"" 
3:     android:enabled=""true"" 
4:     android:exported=""true"" 
5:     android:icon=""@drawable/ic_fast_forward"" 
6:     android:label=""@string/next_wallpaper"" 
7:     android:roundIcon=""@drawable/ic_fast_forward"">
8: </receiver>","<receiver 
  android:name="".widgets.NextWallpaperWidgetTransparent"" 
  android:enabled=""true"" 
  android:exported=""true"" 
  android:icon=""@drawable/ic_fast_forward"" 
  android:label=""@string/next_wallpaper"" 
  android:roundIcon=""@drawable/ic_fast_forward""
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf30f81c7380b61f299c31,23,xml,"1: <receiver
2:     android:name="".widget.WidgetProvider""
3:     android:exported=""true""
4:     android:label=""@string/label_widget"">
5:     <intent-filter>
6:         <action android:name=""android.appwidget.action.APPWIDGET_UPDATE"" />
7:     </intent-filter>
8:     <meta-data
9:         android:name=""android.appwidget.provider""
10:         android:resource=""@xml/widget_info"" />
11: </receiver>","<receiver
    android:name="".widget.WidgetProvider""
    android:exported=""true""
    android:label=""@string/label_widget"">
    <intent-filter>
        <action android:name=""android.appwidget.action.APPWIDGET_UPDATE"" />
    </intent-filter>
    <meta-data
        android:name=""android.appwidget.provider""
        android:resource=""@xml/widget_info"" />
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf3134f474632027c75d58,23,xml,"1: <receiver 
2:     android:name="".MoneroWidget"" 
3:     android:exported=""true"">
4: </receiver>","<receiver 
  android:name="".MoneroWidget"" 
  android:exported=""true""
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf32e5744c580471c5a755,23,xml,"1: <receiver 
2:     android:name=""app_package.BroadcastListener"" 
3:     android:directBootAware=""true"" 
4:     android:enabled=""true"" 
5:     android:exported=""true"">
6: </receiver>","<receiver 
  android:name=""app_package.service.BroadcastListener"" 
  android:directBootAware=""true"" 
  android:enabled=""true"" 
  android:exported=""true""
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf353c526c5879fae67c0f,23,xml,"1: <receiver 
2:     android:name="".QuoteUnquoteWidget"" 
3:     android:enabled=""true"" 
4:     android:exported=""true"">
5: </receiver>","<receiver 
  android:name="".QuoteUnquoteWidget"" 
  android:enabled=""true"" 
  android:exported=""true""
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf357c6a73e39090ffaf1e,23,xml,"1: <receiver 
2:     android:name=""app_package.widget.Widget"" 
3:     android:exported=""true"" 
4:     android:label=""@string/app_name"">
5: </receiver>","<receiver 
  android:name=""app_package.widget.Widget"" 
  android:exported=""true"" 
  android:label=""@string/app_name""
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf386501d89855dbe41ab0,23,xml,"1: <receiver 
2:     android:name="".android.external.ExternalAccessReceiver"" 
3:     android:exported=""true"">
4: </receiver>","<receiver 
  android:name="".android.external.ExternalAccessReceiver"" 
  android:exported=""true""
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf3a0d465c3883202f5394,23,xml,"1: <receiver 
2:     android:name="".recevier.NotificationReceiver"" 
3:     android:exported=""true"">
4: </receiver>","<receiver 
  android:name="".recevier.NotificationReceiver"" 
  android:exported=""true""
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf3b06dcafd85c03a9ea4e,23,xml,"1: <receiver 
2:     android:name=""app_package.GoalWidget"" 
3:     android:exported=""true"">
4: </receiver>","<receiver 
  android:name=""app_package.widget.GoalWidget"" 
  android:exported=""true""
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf3ef0f5aaf31d6753c09a,23,xml,"1: <receiver 
2:     android:name="".receivers.ActionReceiver"" 
3:     android:enabled=""true"" 
4:     android:exported=""true"" tools:ignore=""ExportedReceiver"">
5: </receiver>","<receiver 
  android:name="".receivers.ActionReceiver"" 
  android:enabled=""true"" 
  android:exported=""true"" tools:ignore=""ExportedReceiver""
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf438419c85fc3e29ecabb,23,xml,"1: <receiver 
2:     android:name=""app_package.ToggleWidget"" 
3:     android:exported=""true"" 
4:     android:icon=""@mipmap/ic_launcher"" 
5:     android:label=""@string/widget_start_stop"">
6: </receiver>","<receiver 
  android:name=""app_package.ToggleWidget"" 
  android:exported=""true"" 
  android:icon=""@mipmap/ic_launcher"" 
  android:label=""@string/widget_start_stop""
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf447aba496a5b07f93478,23,xml,"1: <receiver
2:     android:name="".InputDeviceReceiver""
3:     android:label=""@string/keyboard_layouts_label""
4:     android:exported=""true"">
5:     <intent-filter>
6:         <action android:name=""android.hardware.input.action.QUERY_KEYBOARD_LAYOUTS"" />
7:     </intent-filter>
8:     <meta-data
9:         android:name=""android.hardware.input.metadata.KEYBOARD_LAYOUTS""
10:         android:resource=""@xml/keyboard_layouts"" />
11: </receiver>","<receiver
    android:name="".InputDeviceReceiver""
    android:label=""@string/keyboard_layouts_label""
    android:exported=""true"">
    <intent-filter>
        <action android:name=""android.hardware.input.action.QUERY_KEYBOARD_LAYOUTS"" />
    </intent-filter>
    <meta-data
        android:name=""android.hardware.input.metadata.KEYBOARD_LAYOUTS""
        android:resource=""@xml/keyboard_layouts"" />
    android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf44c0657996351b253e2c,23,xml,"1: <receiver 
2:     android:name=""app_package.NotifActionReceiver"" 
3:     android:exported=""true"">
4: </receiver>","<receiver 
  android:name=""app_package.NotifActionReceiver"" 
  android:exported=""true""
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf46ba55c428f563f09004,23,xml,"1: <receiver 
2:     android:name="".notification.ScreenOnReceiver"" 
3:     android:exported=""true"">
4: </receiver>","<receiver 
  android:name="".notification.ScreenOnReceiver"" 
  android:exported=""true""
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf4771f013b627657a5aad,23,xml,"1: <receiver 
2:     android:name=""app_package.AlarmBootReceiver"" 
3:     android:directBootAware=""true"" 
4:     android:enabled=""false"" 
5:     android:exported=""true"">
6: </receiver>","<receiver 
  android:name=""app_package.AlarmBootReceiver"" 
  android:directBootAware=""true"" 
  android:enabled=""false"" 
  android:exported=""true""
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf485337fa5777332a87c2,23,xml,"1: <receiver 
2:     android:name=""app_package.ExerciseAlarm"" 
3:     android:enabled=""true"" 
4:     android:exported=""true"">
5: </receiver>","<receiver 
  android:name=""app_package.ExerciseAlarm"" 
  android:enabled=""true"" 
  android:exported=""true""
  android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66cf4c392f5b77a23176969d,23,xml,"1: <receiver 
2:     android:name=""app_package.helpers.MyWidgetProvider"" 
3:     android:exported=""true"" 
4:     android:icon=""@drawable/img_widget_preview"" 
5:     android:label=""@string/folder"">
6: </receiver>","<receiver 
    android:name=""app_package.helpers.MyWidgetProvider"" 
    android:exported=""true"" 
    android:icon=""@drawable/img_widget_preview"" 
    android:label=""@string/folder""
    android:permission=""custom_permission"" <!--choose your permission here--> >
</receiver>"
66c626500b1fc3a269347dbd,26,java,"1: public Socket createSocket(Socket socket, String host, int port, String clientCertificateAlias) throws NoSuchAlgorithmException, KeyManagementException, MessagingException, IOException {
2:     // rest of the code
3:     SSLSocket sslSocket = (SSLSocket) trustedSocket;
4:     hardenSocket(sslSocket);
5:     setSniHost(socketFactory, sslSocket, host);
6:     return trustedSocket;
7: }","public Socket createSocket(Socket socket, String host, int port, String clientCertificateAlias) throws NoSuchAlgorithmException, KeyManagementException, MessagingException, IOException {
    // rest of the code
    SSLSocket sslSocket = (SSLSocket) trustedSocket;
    
    HostnameVerifier hostname_verif = HttpsURLConnection.getDefaultHostnameVerifier();
    boolean is_verified = hostname_verif.verify(result, result.getSession());
    if (is_verified) {
        // write what to do
    }
    else {
        // write what to do
    }
    hardenSocket(sslSocket);
    setSniHost(socketFactory, sslSocket, host);
    return trustedSocket;
}"
66cf3e3138a9a7db015453ae,26,java,"1: public Socket createSocket() throws IOException  {
2:     SSLSocket result = (SSLSocket) factory.createSocket();
3:     configureSocket(result);
4:     return result;
5: }","public Socket createSocket() throws IOException  {
    SSLSocket result = (SSLSocket) factory.createSocket();

    
    HostnameVerifier hostname_verif = HttpsURLConnection.getDefaultHostnameVerifier();
    boolean is_verified = hostname_verif.verify(result, result.getSession());
    if (is_verified) {
        // write what to do
    }
    else {
        // write what to do
    }

    configureSocket(result);
    return result;
}"
66cf3e3238a9a7db015453af,26,java,"1: public Socket createSocket(String var1, int var2) throws IOException  {
2:     SSLSocket result = (SSLSocket) factory.createSocket(var1, var2);
3:     configureSocket(result);
4:     return result;
5: }","public Socket createSocket(String var1, int var2) throws IOException  {
    SSLSocket result = (SSLSocket) factory.createSocket(var1, var2);
    
    HostnameVerifier hostname_verif = HttpsURLConnection.getDefaultHostnameVerifier();
    boolean is_verified = hostname_verif.verify(result, result.getSession());
    if (is_verified) {
        // write what to do
    }
    else {
        // write what to do
    }
    configureSocket(result);
    return result;
}"
66cf3e3338a9a7db015453b0,26,java,"1: public Socket createSocket(Socket var1, String var2, int var3, boolean var4) throws IOException  {
2:     SSLSocket result = (SSLSocket) factory.createSocket(var1, var2, var3, var4);
3:     configureSocket(result);
4:     return result;
5: }","public Socket createSocket(Socket var1, String var2, int var3, boolean var4) throws IOException  {
    SSLSocket result = (SSLSocket) factory.createSocket(var1, var2, var3, var4);
    
    HostnameVerifier hostname_verif = HttpsURLConnection.getDefaultHostnameVerifier();
    boolean is_verified = hostname_verif.verify(result, result.getSession());
    if (is_verified) {
        // write what to do
    }
    else {
        // write what to do
    }
    configureSocket(result);
    return result;
}"
66cf3e3338a9a7db015453b1,26,java,"1: public Socket createSocket(InetAddress var1, int var2) throws IOException  {
2:     SSLSocket result = (SSLSocket) factory.createSocket(var1, var2);
3:     configureSocket(result);
4:     return result;
5: }","public Socket createSocket(InetAddress var1, int var2) throws IOException  {
    SSLSocket result = (SSLSocket) factory.createSocket(var1, var2);
    
    HostnameVerifier hostname_verif = HttpsURLConnection.getDefaultHostnameVerifier();
    boolean is_verified = hostname_verif.verify(result, result.getSession());
    if (is_verified) {
        // write what to do
    }
    else {
        // write what to do
    }
    configureSocket(result);
    return result;
}"
66cf3e3438a9a7db015453b2,26,java,"1: public Socket createSocket(String var1, int var2, InetAddress var3, int var4) throws IOException  {
2:     SSLSocket result = (SSLSocket) factory.createSocket(var1, var2, var3, var4);
3:     configureSocket(result);
4:     return result;
5: }","public Socket createSocket(String var1, int var2, InetAddress var3, int var4) throws IOException  {
    SSLSocket result = (SSLSocket) factory.createSocket(var1, var2, var3, var4);
    
    HostnameVerifier hostname_verif = HttpsURLConnection.getDefaultHostnameVerifier();
    boolean is_verified = hostname_verif.verify(result, result.getSession());
    if (is_verified) {
        // write what to do
    }
    else {
        // write what to do
    }
    configureSocket(result);
    return result;
}"
66cf3e3538a9a7db015453b3,26,java,"1: public Socket createSocket(InetAddress var1, int var2, InetAddress var3, int var4) throws IOException  {
2:     SSLSocket result = (SSLSocket) factory.createSocket(var1, var2, var3, var4);
3:     configureSocket(result);
4:     return result;
5: }","public Socket createSocket(InetAddress var1, int var2, InetAddress var3, int var4) throws IOException  {
    SSLSocket result = (SSLSocket) factory.createSocket(var1, var2, var3, var4);
    
    HostnameVerifier hostname_verif = HttpsURLConnection.getDefaultHostnameVerifier();
    boolean is_verified = hostname_verif.verify(result, result.getSession());
    if (is_verified) {
        // write what to do
    }
    else {
        // write what to do
    }
    configureSocket(result);
    return result;
}"
65369545cb884721c040c3de,29,java,"1: StringEnc(SecretKey key, String algorithm) {
2:     try {
3:         ecipher = Cipher.getInstance(algorithm);
4:         // rest of the code
5:     }
6:     // rest of the code
7: }","StringEnc(SecretKey key, String algorithm)
{
    try
    {
        
        ecipher = Cipher.getInstance(AES/CBC/PKCS5Padding);
        // rest of the code
    }

}"
65369545cb884721c040c3df,29,java,"1: StringEnc(SecretKey key, String algorithm) {
2:     try {
3:         // rest of the code
4:         dcipher = Cipher.getInstance(algorithm);
5:         // rest of the code
6:     }
7:     // rest of the code
8: }","StringEnc(SecretKey key, String algorithm)
{
    try
    {
        // rest of the code
        dcipher = Cipher.getInstance(AES/CBC/PKCS5Padding);
        // rest of the code
    }
    // rest of the code
}"
65369545cb884721c040c3e0,29,java,"1: byte[] salt = {(byte) 0xA9, (byte) 0x9B, (byte) 0xC8, (byte) 0x32, (byte) 0x56, (byte) 0x34, (byte) 0xE3, (byte) 0x03};
2: int iterationCount = 19;
3: try {
4:     KeySpec keySpec = new PBEKeySpec(passPhrase.toCharArray(), salt, iterationCount);
5:     SecretKey key = SecretKeyFactory.getInstance(""PBEWithMD5AndDES"").generateSecret(keySpec);
6:     ecipher = Cipher.getInstance(key.getAlgorithm());
7:     // rest of the code
8:     ecipher.init(Cipher.ENCRYPT_MODE, key, paramSpec);
9:     // rest of the code
10: }","byte[] salt = {(byte) 0xA9, (byte) 0x9B, (byte) 0xC8, (byte) 0x32, (byte) 0x56, (byte) 0x34,
(byte) 0xE3, (byte) 0x03};
int iterationCount = 19;
try
{
    KeySpec keySpec = new PBEKeySpec(passPhrase.toCharArray(), salt, iterationCount);
    SecretKey key = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"").generateSecret(keySpec);
    byte[] iv = new byte[16];
    new SecureRandom().nextBytes(iv);
    IvParameterSpec iv_param = new IvParameterSpec(iv);

    ecipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    // rest of the code

    ecipher.init(Cipher.ENCRYPT_MODE, key, iv_param);
    // rest of the code
}"
65369545cb884721c040c3e1,29,java,"1: byte[] salt = {(byte) 0xA9, (byte) 0x9B, (byte) 0xC8, (byte) 0x32, (byte) 0x56, (byte) 0x34, (byte) 0xE3, (byte) 0x03};
2: int iterationCount = 19;
3: try {
4:     KeySpec keySpec = new PBEKeySpec(passPhrase.toCharArray(), salt, iterationCount);
5:     SecretKey key = SecretKeyFactory.getInstance(""PBEWithMD5AndDES"").generateSecret(keySpec);
6:     // rest of the code
7:     dcipher = Cipher.getInstance(key.getAlgorithm());
8:     // rest of the code
9:     dcipher.init(Cipher.DECRYPT_MODE, key, paramSpec);
10: }","byte[] salt = {(byte) 0xA9, (byte) 0x9B, (byte) 0xC8, (byte) 0x32, (byte) 0x56, (byte) 0x34,
(byte) 0xE3, (byte) 0x03};
int iterationCount = 19;
try
{
    KeySpec keySpec = new PBEKeySpec(passPhrase.toCharArray(), salt, iterationCount);
    SecretKey key = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"").generateSecret(keySpec);
    byte[] iv = new byte[16];
    new SecureRandom().nextBytes(iv);
    IvParameterSpec iv_param = new IvParameterSpec(iv);

    // rest of the code
    dcipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");

    // rest of the code
    dcipher.init(Cipher.DECRYPT_MODE, key, iv_param);

}"
6536a2d7065b0e94fa9e758d,29,java,"1: public String getInstallationId()  {
2:     String installation_id = (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) ? Settings.Secure.getString(mContext.getContentResolver(), Settings.Secure.ANDROID_ID) : Build.SERIAL;
3:     try  {
4:         MessageDigest md5 = MessageDigest.getInstance(""MD5"");
5:         byte[] digest = md5.digest(installation_id.getBytes());
6:         installation_id = ""M"" + Utils.byteArrayToHex(digest, 8);
7:     } catch (NoSuchAlgorithmException e)  {
8:         e.printStackTrace();
9:         installation_id = ""D"" + installation_id;
10:     }
11:     return installation_id;
12: }","public String getInstallationId()  {
    String installation_id = (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) ? Settings.Secure.getString(mContext.getContentResolver(), Settings.Secure.ANDROID_ID) : Build.SERIAL;
    try  {
        MessageDigest md5 = MessageDigest.getInstance(""SHA-256"");
        byte[] digest = md5.digest(installation_id.getBytes());
        installation_id = ""M"" + Utils.byteArrayToHex(digest, 8);
    } catch (NoSuchAlgorithmException e)  {
        e.printStackTrace();
        installation_id = ""D"" + installation_id;
    }
    return installation_id;
}"
6536a2d7065b0e94fa9e758e,29,java,"1: public boolean isValidLicense(String license)  {
2:     if(license.isEmpty())
3:     return false;
4:     try  {
5:         byte[] data = Utils.base32Decode(license);
6:         if((data.length != 60) || (data[0] != 'v') || (data[1] != '1')) return false;
7:         KeyFactory keyFactory = KeyFactory.getInstance(""EC"");
8:         PublicKey pk = keyFactory.generatePublic(new X509EncodedKeySpec(android.util.Base64.decode(KEY, android.util.Base64.DEFAULT)));
9:         Signature sig = Signature.getInstance(""SHA1withECDSA"");
10:         sig.initVerify(pk);
11:         String msg = SUPPORTER_SKU + ""@"" + getInstallationId();
12:         sig.update(msg.getBytes(StandardCharsets.US_ASCII));
13:         return sig.verify(getASN1(data, 4));
14:     } catch (NoSuchAlgorithmException | InvalidKeySpecException | InvalidKeyException | SignatureException | IllegalArgumentException e)  {
15:         Log.d(TAG, e.getMessage());
16:         return false;
17:     }
18: }","public boolean isValidLicense(String license)  {
    if(license.isEmpty())
    return false;
    try  {
        byte[] data = Utils.base32Decode(license);
        if((data.length != 60) || (data[0] != 'v') || (data[1] != '1')) return false;
        KeyFactory keyFactory = KeyFactory.getInstance(""EC"");
        PublicKey pk = keyFactory.generatePublic(new X509EncodedKeySpec(android.util.Base64.decode(KEY, android.util.Base64.DEFAULT)));
        
        Signature sig = Signature.getInstance(""SHA256withECDSA"");
        sig.initVerify(pk);
        String msg = SUPPORTER_SKU + ""@"" + getInstallationId();
        sig.update(msg.getBytes(StandardCharsets.US_ASCII));
        return sig.verify(getASN1(data, 4));
    } catch (NoSuchAlgorithmException | InvalidKeySpecException | InvalidKeyException | SignatureException | IllegalArgumentException e)  {
        Log.d(TAG, e.getMessage());
        return false;
    }
}"
6536a83897701d7828e923f4,29,java,"1: public static byte[] hmac(String algorithm, byte[] key, byte[] message) throws NoSuchAlgorithmException, InvalidKeyException  {
2:     Mac mac = Mac.getInstance(algorithm);
3:     mac.init(new SecretKeySpec(key, algorithm));
4:     return mac.doFinal(message);
5: }","public static byte[] hmac(String algorithm, byte[] key, byte[] message) throws NoSuchAlgorithmException, InvalidKeyException  {
    
    Mac mac = Mac.getInstance(""HmacSHA256"");
    mac.init(new SecretKeySpec(key, algorithm));
    return mac.doFinal(message);
}"
6536aaca498f55cb7ec7afb7,29,java,"1: @Override
2: public byte[] encrypt(byte[] inData) throws GeneralSecurityException  {
3:     if(random == null) random = new SecureRandom();
4:     byte[] salt = new byte[saltLen];
5:     random.nextBytes(salt);
6:     SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(keyFactoryAlgorithm);
7:     KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, keyIterationCount, keyLength);
8:     SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);
9:     SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getEncoded(), keyAlgorithm);
10:     byte[] iv = new byte[ivLen];
11:     random.nextBytes(iv);
12:     GCMParameterSpec gcmSpec = new GCMParameterSpec(keyLength, iv);
13:     Cipher cipher = Cipher.getInstance(cipherTransformation);
14:     cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, gcmSpec);
15:     byte[] data = cipher.doFinal(inData);
16:     byte[] allByteArray = new byte[saltLen + ivLen + data.length];
17:     ByteBuffer byteBuffer = ByteBuffer.wrap(allByteArray);
18:     byteBuffer.put(salt);
19:     byteBuffer.put(iv);
20:     byteBuffer.put(data);
21:     return byteBuffer.array();
22: }","@Override
public byte[] encrypt(byte[] inData) throws GeneralSecurityException  {
    if(random == null) random = new SecureRandom();
    byte[] salt = new byte[saltLen];
    random.nextBytes(salt);
    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(keyFactoryAlgorithm);
    KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, keyIterationCount, keyLength);
    SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);
    SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getEncoded(), keyAlgorithm);
    byte[] iv = new byte[ivLen];
    random.nextBytes(iv);
    GCMParameterSpec gcmSpec = new GCMParameterSpec(keyLength, iv);
    
    Cipher cipher = Cipher.getInstance(""AES/GCM/NoPadding"");
    cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, gcmSpec);
    byte[] data = cipher.doFinal(inData);
    byte[] allByteArray = new byte[saltLen + ivLen + data.length];
    ByteBuffer byteBuffer = ByteBuffer.wrap(allByteArray);
    byteBuffer.put(salt);
    byteBuffer.put(iv);
    byteBuffer.put(data);
    return byteBuffer.array();
}"
6536aacb498f55cb7ec7afcd,29,java,"1: public Observable<ReduxEventAttachmentUpload> sendFile(short requestID, ConversationTarget conversation, File file)  {
2:     return Observable.create((emitter) ->  {
3:         try  {
4:             MessageDigest messageDigest = MessageDigest.getInstance(hashAlgorithm);
5:             // rest of the code
6:         } catch (Exception e) {} });
7: }","public Observable<ReduxEventAttachmentUpload> sendFile(short requestID, ConversationTarget conversation, File file)  {
    return Observable.create((emitter) ->  {
        try  {
            MessageDigest messageDigest = MessageDigest.getInstance(""SHA-256"");
            // rest of the code
        });
}"
6536b02a7f8e918c86e95e3b,29,java,"1: public static boolean checkDeviceFingerprintsChanged()  {
2:     if (hasChangedFingerprints != null)  {
3:         return hasChangedFingerprints;
4:     }
5:     try  {
6:         Cipher cipher = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
7:         cipher.init(Cipher.DECRYPT_MODE, keyStore.getKey(KEY_ALIAS, null));
8:         return hasChangedFingerprints = false;
9:     } catch (KeyPermanentlyInvalidatedException ignored)  {
10:         return hasChangedFingerprints = true;
11:     } catch (Exception e)  {
12:         FileLog.e(e);
13:     }
14:     return hasChangedFingerprints = false;
15: }","public static boolean checkDeviceFingerprintsChanged()  {
    if (hasChangedFingerprints != null)  {
        return hasChangedFingerprints;
    }
    try  {
        
        Cipher cipher = Cipher.getInstance(""RSA/ECB/OAEPPadding"");
        // use SHA-256 for both digests
        cipher.init(Cipher.DECRYPT_MODE, keyStore.getKey(KEY_ALIAS, null), new OAEPParameterSpec(""SHA-256"", ""MGF1"", MGF1ParameterSpec.SHA256, PSource.PSpecified.DEFAULT));
        return hasChangedFingerprints = false;
    } catch (KeyPermanentlyInvalidatedException ignored)  {
        return hasChangedFingerprints = true;
    } catch (Exception e)  {
        FileLog.e(e);
    }
    return hasChangedFingerprints = false;
}"
6536b02b7f8e918c86e95e3e,29,java,"1: public static byte[] computeSHA1(byte[] convertme, int offset, int len)  {
2:     try  {
3:         MessageDigest md = MessageDigest.getInstance(""SHA-1"");
4:         md.update(convertme, offset, len);
5:         return md.digest();
6:     } catch (Exception e)  {
7:         FileLog.e(e);
8:     }
9:     return new byte[20];
10: }","public static byte[] computeSHA1(byte[] convertme, int offset, int len)  {
    try  {
        
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        md.update(convertme, offset, len);
        return md.digest();
    } catch (Exception e)  {
        FileLog.e(e);
    }
    return new byte[20];
}"
6536b02c7f8e918c86e95e40,29,java,"1: public static String MD5(String md5)  {
2:     if (md5 == null)  {
3:         return null;
4:     }
5:     try  {
6:         java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
7:         byte[] array = md.digest(AndroidUtilities.getStringBytes(md5));
8:         StringBuilder sb = new StringBuilder();
9:         for (int a = 0; a < array.length; a++)  {
10:             sb.append(Integer.toHexString((array[a] & 0xFF) | 0x100).substring(1, 3));
11:         }
12:         return sb.toString();
13:     } catch (java.security.NoSuchAlgorithmException e)  {
14:         FileLog.e(e);
15:     }
16:     return null;
17: }",": use only a recommended algorithm
// MessageDigest <msg_digest> = MessageDigest.getInstance(""SHA-256"");

public static String MD5(String md5)  {
    if (md5 == null)  {
        return null;
    }
    try  {
        
        java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA-256"");
        byte[] array = md.digest(AndroidUtilities.getStringBytes(md5));
        StringBuilder sb = new StringBuilder();
        for (int a = 0; a < array.length; a++)  {
            sb.append(Integer.toHexString((array[a] & 0xFF) | 0x100).substring(1, 3));
        }
        return sb.toString();
    } catch (java.security.NoSuchAlgorithmException e)  {
        FileLog.e(e);
    }
    return null;
}"
6536b1197bdd35f771d54f6c,29,java,"1: public byte[] encryptDataWithPrivateKey(byte[] buffer, int length)  {
2:     try  {
3:         Cipher cipher = Cipher.getInstance(TTT_ENCRYPTION_ALGORITHM);
4:         cipher.init(Cipher.ENCRYPT_MODE, privateKey);
5:         byte[] cipherData = cipher.doFinal(buffer,0, length);
6:         return cipherData;
7:     } catch (GeneralSecurityException e)  {
8:         throw new IllegalStateException(e);
9:     }
10: }","public byte[] encryptDataWithPrivateKey(byte[] buffer, int length)  {
    try  {
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        byte[] iv = new byte[16];
        new SecureRandom().nextBytes(iv);
        IvParameterSpec iv_param = new IvParameterSpec(iv);
        cipher.init(Cipher.ENCRYPT_MODE, privateKey, iv_param);
        byte[] cipherData = cipher.doFinal(buffer,0, length);
        return cipherData;
    } catch (GeneralSecurityException e)  {
        throw new IllegalStateException(e);
    }
}"
6536b1197bdd35f771d54f6d,29,java,"1: public static GpsTrailerCrypt generateAndInitializeNewUserDataEncryptingKey(int appId, SQLiteDatabase db)  {
2:     try  {
3:         byte[] userDataKey = new byte[prefs.aesKeySize/8];
4:         new SecureRandom().nextBytes(userDataKey);
5:         PublicKey publicKey = constructPublicKey();
6:         Cipher cipher = Cipher.getInstance(INTERNAL_ASYMMETRIC_ENCRYPTION_ALGORITHM);
7:         cipher.init(Cipher.ENCRYPT_MODE, publicKey);
8:         byte[] cipherData = cipher.doFinal(userDataKey);
9:         SQLiteStatement s = DbUtil.createOrGetStatement(db,""insert into USER_DATA_KEY (app_id, encrypted_key) values (?,?)"");
10:         s.bindLong(1, appId);
11:         s.bindBlob(2, cipherData);
12:         int userDataKeyId = (int) s.executeInsert();
13:         return new GpsTrailerCrypt(userDataKeyId, userDataKey);
14:     } catch (Exception e)  {
15:         throw new IllegalStateException(""Can't seem to encrypt a key"", e);
16:     }
17: }","public static GpsTrailerCrypt generateAndInitializeNewUserDataEncryptingKey(int appId, SQLiteDatabase db)  {
    try  {
        byte[] userDataKey = new byte[prefs.aesKeySize/8];
        new SecureRandom().nextBytes(userDataKey);
        PublicKey publicKey = constructPublicKey();
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        byte[] iv = new byte[16];
        new SecureRandom().nextBytes(iv);
        IvParameterSpec iv_param = new IvParameterSpec(iv);
        cipher.init(Cipher.ENCRYPT_MODE, publicKey, iv_param);
        byte[] cipherData = cipher.doFinal(userDataKey);
        SQLiteStatement s = DbUtil.createOrGetStatement(db,""insert into USER_DATA_KEY (app_id, encrypted_key) values (?,?)"");
        s.bindLong(1, appId);
        s.bindBlob(2, cipherData);
        int userDataKeyId = (int) s.executeInsert();
        return new GpsTrailerCrypt(userDataKeyId, userDataKey);
    } catch (Exception e)  {
        throw new IllegalStateException(""Can't seem to encrypt a key"", e);
    }
}"
6536b2a4aa68d06e875b1329,29,java,"1: private static Cipher getCipherFromPassphrase(String passphrase, byte[] salt, int iterations, int opMode) throws GeneralSecurityException   {
2:     SecretKey key = getKeyFromPassphrase(passphrase, salt, iterations);
3:     Cipher cipher = Cipher.getInstance(key.getAlgorithm());
4:     cipher.init(opMode, key, new PBEParameterSpec(salt, iterations));
5:     return cipher;
6: }","private static Cipher getCipherFromPassphrase(String passphrase, byte[] salt, int iterations, int opMode) throws GeneralSecurityException   {
    byte[] iv = new byte[16];
    new SecureRandom().nextBytes(iv);
    IvParameterSpec iv_param = new IvParameterSpec(iv);

    // do the necessary modification to getKeyFromPassphrase method
    SecretKey key = getKeyFromPassphrase(passphrase, salt, iterations);
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    cipher.init(opMode, key, iv_param);
    return cipher;
}"
6536b2a4aa68d06e875b132a,29,java,"1: private static Mac getMacForPassphrase(String passphrase, byte[] salt, int iterations)      throws GeneralSecurityException   {
2:     SecretKey     key     = getKeyFromPassphrase(passphrase, salt, iterations);
3:     byte[]        pbkdf2  = key.getEncoded();
4:     SecretKeySpec hmacKey = new SecretKeySpec(pbkdf2, ""HmacSHA1"");
5:     Mac           hmac    = Mac.getInstance(""HmacSHA1"");
6:     hmac.init(hmacKey);
7:     return hmac;
8: }","private static Mac getMacForPassphrase(String passphrase, byte[] salt, int iterations) throws GeneralSecurityException   {
    SecretKey key = getKeyFromPassphrase(passphrase, salt, iterations);
    byte[] pbkdf2 = key.getEncoded();
    
    SecretKeySpec hmacKey = new SecretKeySpec(pbkdf2, ""HmacSHA256"");
    Mac hmac = Mac.getInstance(""HmacSHA256"");
    hmac.init(hmacKey);
    return hmac;
}"
6536b2a4aa68d06e875b132b,29,java,"1: private Mac initializeMac(SecretKeySpec key) throws NoSuchAlgorithmException, InvalidKeyException  {
2:     Mac hmac = Mac.getInstance(""HmacSHA1"");
3:     hmac.init(key);
4:     return hmac;
5: }","private Mac initializeMac(SecretKeySpec key) throws NoSuchAlgorithmException, InvalidKeyException  {
    
    Mac hmac = Mac.getInstance(""HmacSHA256"");
    hmac.init(key);
    return hmac;
}"
6536b2a4aa68d06e875b132c,29,java,"1: private Mac initializeMac()  {
2:     try  {
3:         return Mac.getInstance(""HmacSHA1"");
4:     } catch (NoSuchAlgorithmException e)  {
5:         throw new AssertionError(e);
6:     }
7: }","private Mac initializeMac()  {
    try  {
        
        return Mac.getInstance(""HmacSHA256"");
    } catch (NoSuchAlgorithmException e)  {
        throw new AssertionError(e);
    }
}"
6536b2a4aa68d06e875b132d,29,java,"1: public MasterCipher(MasterSecret masterSecret)  {
2:     try  {
3:         this.masterSecret = masterSecret;
4:         this.encryptingCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
5:         this.decryptingCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
6:         this.hmac = Mac.getInstance(""HmacSHA1"");
7:     } catch (NoSuchPaddingException | NoSuchAlgorithmException nspe)  {
8:         throw new AssertionError(nspe);
9:     }
10: }","public MasterCipher(MasterSecret masterSecret)  {
    try  {
        this.masterSecret = masterSecret;
        this.encryptingCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        this.decryptingCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        
        this.hmac = Mac.getInstance(""HmacSHA256"");
    } catch (NoSuchPaddingException | NoSuchAlgorithmException nspe)  {
        throw new AssertionError(nspe);
    }
}"
6536b2a4aa68d06e875b1339,29,java,"1: // rest of the code
2: this.digest = MessageDigest.getInstance(""SHA1"");
3: } catch (NoSuchAlgorithmException nsae)  {
4: throw new AssertionError(""SHA-1 missing"");
5: }
6: // rest of the code","// rest of the code

try {
    this.digest = MessageDigest.getInstance(""SHA-256"");
} catch (NoSuchAlgorithmException nsae)  {
    throw new AssertionError(""SHA-256 missing"");
}
// rest of the code"
6536b2a4aa68d06e875b133a,29,java,"1: public byte[] getFingerprintBytes()  {
2:     try  {
3:         MessageDigest md = MessageDigest.getInstance(""SHA-1"");
4:         return md.digest(serialize());
5:     } catch (NoSuchAlgorithmException nsae)  {
6:         Log.w(""LocalKeyPair"", nsae);
7:         throw new IllegalArgumentException(""SHA-1 isn't supported!"");
8:     }
9: }","public byte[] getFingerprintBytes()  {
    try  {
        
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        return md.digest(serialize());
    } catch (NoSuchAlgorithmException nsae)  {
        Log.w(""LocalKeyPair"", nsae);
        throw new IllegalArgumentException(""SHA-256 isn't supported!"");
    }
}"
6536b2a5aa68d06e875b133b,29,java,"1: private static String calculatePrefix(byte[] message, int byteCount)  {
2:     try  {
3:         MessageDigest md = MessageDigest.getInstance(""SHA1"");
4:         byte[] runningDigest = message;
5:         for (int i=0;i<HASH_ITERATIONS;i++)  {
6:             runningDigest = md.digest(runningDigest);
7:         }
8:         return Base64.encodeBytes(runningDigest, 0, byteCount);
9:     } catch (NoSuchAlgorithmException e)  {
10:         throw new AssertionError(e);
11:     }
12: }","private static String calculatePrefix(byte[] message, int byteCount)  {
    try  {
        
        MessageDigest md = MessageDigest.getInstance(""SHA256"");
        byte[] runningDigest = message;
        for (int i=0;i<HASH_ITERATIONS;i++)  {
            runningDigest = md.digest(runningDigest);
        }
        return Base64.encodeBytes(runningDigest, 0, byteCount);
    } catch (NoSuchAlgorithmException e)  {
        throw new AssertionError(e);
    }
}"
66c626500b1fc3a269347dbe,29,java,"1: public static byte[] computeCramMd5Bytes(String username, String password, byte[] b64Nonce) throws MessagingException {
2:     try {
3:         byte[] nonce = Base64.decodeBase64(b64Nonce);
4:         byte[] secretBytes = password.getBytes();
5:         MessageDigest md = MessageDigest.getInstance(""MD5"");
6:         if (secretBytes.length > 64) {
7:             secretBytes = md.digest(secretBytes);
8:         }
9:         byte[] ipad = new byte[64];
10:       byte[] opad = new byte[64];
11:       System.arraycopy(secretBytes, 0, ipad, 0, secretBytes.length);
12:       System.arraycopy(secretBytes, 0, opad, 0, secretBytes.length);
13:       for (int i = 0; i < ipad.length; i++) ipad[i] ^= 0x36;
14:       for (int i = 0; i < opad.length; i++) opad[i] ^= 0x5c;
15:       md.update(ipad);
16:       byte[] firstPass = md.digest(nonce);
17:       md.update(opad);
18:       byte[] result = md.digest(firstPass);
19:       String plainCRAM = username + "" "" + Hex.encodeHex(result);
20:       return Base64.encodeBase64(plainCRAM.getBytes());
21:     } catch (Exception e) {
22:           throw new MessagingException(""Something went wrong during CRAM-MD5 computation"", e);
23:     }
24: }","public static byte[] computeCramMd5Bytes(String username, String password, byte[] b64Nonce) throws MessagingException {
    try {
        byte[] nonce = Base64.decodeBase64(b64Nonce);
        byte[] secretBytes = password.getBytes();
        
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        if (secretBytes.length > 64) {
            secretBytes = md.digest(secretBytes);
        }
        byte[] ipad = new byte[64];
        byte[] opad = new byte[64];
        System.arraycopy(secretBytes, 0, ipad, 0, secretBytes.length);
        System.arraycopy(secretBytes, 0, opad, 0, secretBytes.length);
        for (int i = 0; i < ipad.length; i++) ipad[i] ^= 0x36;
        for (int i = 0; i < opad.length; i++) opad[i] ^= 0x5c;
        md.update(ipad);
        byte[] firstPass = md.digest(nonce);
        md.update(opad);
        byte[] result = md.digest(firstPass);
        String plainCRAM = username + "" "" + Hex.encodeHex(result);
        return Base64.encodeBase64(plainCRAM.getBytes());
    } catch (Exception e) {
        throw new MessagingException(""Something went wrong during CRAM-MD5 computation"", e);
    }
}"
66c7b7d5b21640aee7e392c3,29,java,"1: private void authAPOP(String serverGreeting) throws MessagingException, IOException {
2:     // rest of the code
3:     MessageDigest md;
4:     try {
5:         md = MessageDigest.getInstance(""MD5"");
6:     } catch (NoSuchAlgorithmException e) {
7:         throw new MessagingException(""MD5 failure during POP3 auth APOP"", e);
8:     }
9:     byte[] digest = md.digest((timestamp + settings.getPassword()).getBytes());
10:   String hexDigest = Hex.encodeHex(digest);
11:   try {
12:       executeSimpleCommand(""APOP "" + settings.getUsername() + "" "" + hexDigest, true);
13:   } catch (Pop3ErrorResponse e) {
14:       throw new AuthenticationFailedException(""APOP failed"", e, e.getResponseText());
15:   }
16: }","private void authAPOP(String serverGreeting) throws MessagingException, IOException {
    // rest of the code
    MessageDigest md;
    try {
    
        md = MessageDigest.getInstance(""SHA-256"");
    } catch (NoSuchAlgorithmException e) {
        throw new MessagingException(""SHA-256 failure during POP3 auth APOP"", e);
    }
    byte[] digest = md.digest((timestamp + settings.getPassword()).getBytes());
    String hexDigest = Hex.encodeHex(digest);
    try {
        executeSimpleCommand(""APOP "" + settings.getUsername() + "" "" + hexDigest, true);
    } catch (Pop3ErrorResponse e) {
        throw new AuthenticationFailedException(""APOP failed"", e, e.getResponseText());
    }
}"
66c7bc211823aa372eb9e76a,29,java,"1: public Observable<ReduxEventAttachmentUpload> sendFile(short requestID, ConversationTarget conversation, File file)  {
2:     return Observable.create((emitter) ->  {
3:         try  {
4:             MessageDigest messageDigest = MessageDigest.getInstance(hashAlgorithm);
5:             try(InputStream inputStream = new DeflaterInputStream(new DigestInputStream(new BufferedInputStream(new FileInputStream(file)), messageDigest)))  {
6:                 // rest of the code
7:             }
8:         } catch (Exception e) {} });
9: }","public Observable<ReduxEventAttachmentUpload> sendFile(short requestID, ConversationTarget conversation, File file)  {
    return Observable.create((emitter) ->  {
        try  {
            
            String hashAlgorithm = ""SHA-256"";
            MessageDigest messageDigest = MessageDigest.getInstance(hashAlgorithm);
            try(InputStream inputStream = new DeflaterInputStream(new DigestInputStream(new BufferedInputStream(new FileInputStream(file)), messageDigest)))  {
                // rest of the code
            }
        }
    });
}"
66cf2f7639e199f012fd3af6,29,java,"1: private static String hashHmac(String algorithm, byte[] data, byte[] key)  {
2:     String result = """";
3:     final SecretKeySpec secretKey = new SecretKeySpec(key,                algorithm);
4:     try  {
5:         Mac mac = Mac.getInstance(algorithm);
6:         mac.init(secretKey);
7:         byte[] macData = mac.doFinal(data);
8:         result = HexUtil.bytesToHex(macData);
9:     } catch (NoSuchAlgorithmException e)  {
10:         e.printStackTrace();
11:     } catch (InvalidKeyException e)  {
12:         e.printStackTrace();
13:     }
14:     return result;
15: }","private static String hashHmac(String algorithm, byte[] data, byte[] key)  {
    String result = """";
    final SecretKeySpec secretKey = new SecretKeySpec(key, algorithm);
    try  {
        
        algorithm = ""HmacSHA256"";
        Mac mac = Mac.getInstance(algorithm);
        mac.init(secretKey);
        byte[] macData = mac.doFinal(data);
        result = HexUtil.bytesToHex(macData);
    } catch (NoSuchAlgorithmException e)  {
        e.printStackTrace();
    } catch (InvalidKeyException e)  {
        e.printStackTrace();
    }
    return result;
}"
66cf37c8608fcf23a89312ba,29,java,"1: private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception  {
2:     SecretKeySpec skeySpec = new SecretKeySpec(raw, ""AES"");
3:     Cipher cipher = Cipher.getInstance(""AES"");
4:     cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
5:     byte[] encrypted = cipher.doFinal(clear);
6:     return encrypted;
7: }","private static byte[] encrypt(byte[] raw, byte[] clear) throws Exception  {
    SecretKeySpec skeySpec = new SecretKeySpec(raw, ""AES"");
    
    byte[] iv = new byte[16];
    new SecureRandom().nextBytes(iv);
    IvParameterSpec iv_param = new IvParameterSpec(iv);
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    cipher.init(opMode, skeySpec, iv_param)
    byte[] encrypted = cipher.doFinal(clear);
    return encrypted;
}"
66cf3a336fcf9cbbb9cea07a,29,java,"1: public static String calculateMD5(File file)  {
2:     try  {
3:         FileInputStream fis = new FileInputStream(file);
4:         MessageDigest md = MessageDigest.getInstance(""MD5"");
5:         byte[] buffer = new byte[1024];
6:         int bytesRead;
7:         while ((bytesRead = fis.read(buffer)) != -1)  {
8:             md.update(buffer, 0, bytesRead);
9:         }
10:         fis.close();
11:         byte[] mdBytes = md.digest();
12:         StringBuilder hexString = new StringBuilder();
13:         for (byte b : mdBytes)  {
14:             hexString.append(String.format(""%02x"", b));
15:         }
16:         return hexString.toString();
17:     } catch (Exception e)  {
18:         e.printStackTrace();
19:         return null;
20:     }","public static String calculateMD5(File file)  {
    try  {
        FileInputStream fis = new FileInputStream(file);
        
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        byte[] buffer = new byte[1024];
        int bytesRead;
        while ((bytesRead = fis.read(buffer)) != -1)  {
            md.update(buffer, 0, bytesRead);
        }
        fis.close();
        byte[] mdBytes = md.digest();
        StringBuilder hexString = new StringBuilder();
        for (byte b : mdBytes)  {
            hexString.append(String.format(""%02x"", b));
        }
        return hexString.toString();
    } catch (Exception e)  {
        e.printStackTrace();
        return null;
    }
}"
66cf3e3e38a9a7db015453bc,29,java,"1: private static String md5(String md5)  {
2:     try  {
3:         java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5"");
4:         byte[] array = md.digest(md5.getBytes(""UTF-8""));
5:         StringBuilder sb = new StringBuilder();
6:         for (byte b : array)  {
7:             sb.append(Integer.toHexString((b & 0xFF) | 0x100).substring(1, 3));
8:         }
9:         return sb.toString();
10:     } catch (NoSuchAlgorithmException | UnsupportedEncodingException e)  {
11:         return null;
12:     }
13: }","private static String md5(String md5)  {
    try  {
        
        java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA-256"");
        byte[] array = md.digest(md5.getBytes(""UTF-8""));
        StringBuilder sb = new StringBuilder();
        for (byte b : array)  {
            sb.append(Integer.toHexString((b & 0xFF) | 0x100).substring(1, 3));
        }
        return sb.toString();
    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e)  {
        return null;
    }
}"
66cf3e4038a9a7db015453be,29,java,"1: public void performBackup(ParcelFileDescriptor oldState, BackupDataOutput data, ParcelFileDescriptor newState)  {
2:     Log.d(TAG, ""Performing backup"");
3:     ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
4:     MessageDigest digester = null;
5:     Writer writer;
6:     try  {
7:         digester = MessageDigest.getInstance(""MD5"");
8:         writer = new OutputStreamWriter(new DigestOutputStream(byteStream, digester),Charset.forName(""UTF-8""));
9:     } catch (NoSuchAlgorithmException e)  {
10:         writer = new OutputStreamWriter(byteStream, Charset.forName(""UTF-8""));
11:     }
12:     // rest of the code
13: }","public void performBackup(ParcelFileDescriptor oldState, BackupDataOutput data, ParcelFileDescriptor newState)  {
    Log.d(TAG, ""Performing backup"");
    ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
    MessageDigest digester = null;
    Writer writer;
    try  {
        
        digester = MessageDigest.getInstance(""SHA-256"");
        writer = new OutputStreamWriter(new DigestOutputStream(byteStream, digester),Charset.forName(""UTF-8""));
    } catch (NoSuchAlgorithmException e)  {
        writer = new OutputStreamWriter(byteStream, Charset.forName(""UTF-8""));
    }
    // rest of the code
}"
